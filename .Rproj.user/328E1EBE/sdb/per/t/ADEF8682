{
    "collab_server" : "",
    "contents" : "rm(list= ls()) ##clear R\n\ninstall.packages(\"bbmle\") ## RUN THE FIRST TIME TO INSTALL THIS PACKAGE.\ninstall.packages(\"pracma\") ## RUN THE FIRST TIME TO INSTALL THIS PACKAGE.\n\n\nlibrary(bbmle) ##load bbmle package, install this package if needed\nlibrary(pracma) ##load pracma package, install this package if needed\n\n##this file is used to model TPC using 2 models: Gaussian and Expontentially modified Gaussian (EMG). \n\n##load your .txt / .csv files. It should have two columns (performance, temp)\nmydata1 <-read.csv(file.choose(), sep=\",\", header=TRUE)\nmydata2 <-read.csv(file.choose(), sep=\",\", header=TRUE)\n# transforming your dataframe to x and y titles. Make sure your headers matches the \"mydata$name\" \ntemp <- mydata1$exp_temp ##ENTER YOUR TEMP header\nperformance <- mydata1$Wei_Res_Rate ##ENTER YOUR RATE header\ntemp2 <- mydata2$exp_temp\nperformance2 <- mydata2$Wei_Res_Rate\n\nplot(temp,performance)\npoints(temp2,performance2)\n#ENTER KNOWN LETHAL TEMPERATURE LIMITED OF SPECIES\nlow.lethal <- 0\nhigh.lethal <- 22\n\n##ADD LOWER LIMIT DATA TO FORCE THE CURVE TO ZERO...THIS IS OPTIONAL\nlow.performance <- c(0,0,0,0,0,0)\nlow.temp <- c(low.lethal, low.lethal, low.lethal, low.lethal, low.lethal, low.lethal)\nhigh.temp <- c(high.lethal,high.lethal,high.lethal,high.lethal,high.lethal,high.lethal)\n\ntemp <- append(temp, low.temp)\nperformance <- append(performance, low.performance)\n\ndf <- data.frame(temp, performance)\n\n## CHANGE axes limits\nplot(temp, performance, col = \"orange\", xlab = \"Temperature\", ylab = \"Respiration Rate\", \n     xlim = c(10, 24), ylim = c(0, 0.06), bty = \"l\", pch = 20, lwd = 5, \n     main = \"Copper Rockfish Experiment\")\npoints(temp2,performance2, col = \"brown\", pch = 20, lwd = 5)\n\nplot(temp, performance, col = \"black\", xlab = \"Temperature\", ylab = \"Respiration Rate\", \n     xlim = c(10, 24), ylim = c(0, 0.06), bty = \"l\", pch = 20, lwd = 5, \n     main = \"Black Rockfish Experiment\")\npoints(temp2,performance2, col = \"goldenrod\", pch = 20, lwd = 5)\n\n##########################################################################\n#                          Gaussian function                             #\n##########################################################################\n\n##Gaussian is a simple function. It is a normal distribution fit.\n##mu = To (Temperature where performance is the highest)\n##k = the amplitude of the curve\n##o = standard deviation of hte curve\n\n## THE PROBLEM with the Gaussian function is that it is not biological relevant. \n## The right side distribution lacks a skew that describes performance under thermal stress to mortality\n## Nevertheless I have the function here to compare to the EMG\n\n\n## Create the Gaussian function (define constants and equation)\nyhat = function(mu, o, k){\n  P = k*exp(-(temp2-mu)^2/(2*o^2))\n  return(P)\n}\n\n## Create a function to measure negative log likelihood. \n## Negative log likelihood (LL1) is used to predict the constants\nLL1 = function (mu,o, k ,y=performance2){\n  P = yhat(mu=mu, o=o, k=k)\n  #get the total negative log likelihood\n  loglike= -sum(dnorm(y,P,log=TRUE))\n  return(loglike)\n}\n\n## bbmle package, used here to predict fit (constants), needs a predicted start value for each\n## constant (mu, k, o). I am going to use the mean to estimate mu and std to estimate the Gaussian std\nxmean <- mean(temp2)\nxstd <- sd(temp2)\n\n## Predict the constants using maximum likelihood (from bbmle package)\nmle.gau = mle2(minuslogl = LL1, start = list(mu = xmean, o = xstd, k = max(performance2) ))\n\n## Gaussian model summary\nsummary(mle.gau)\nmu <- as.numeric(coef(mle.gau)[\"mu\"])\no <- as.numeric(coef(mle.gau)[\"o\"])\nk <- as.numeric(coef(mle.gau)[\"k\"])\n\n## Plot the Gaussian model with data\n## Here, we are plotting from 0 to 50\n## Data will be plotted as black circles\n\nnewdata <- data.frame(temp = seq(from=0, to=50, by=0.1), number = seq(from=0, to=50, by=0.1))\nnewdata$gau <- k*exp(-(newdata$temp-mu)^2/(2*o^2))\n\n## The Gaussian model will be in red\nlines(newdata$temp, newdata$gau, col = \"orange\", lwd=3)\n\n##########################################################################\n#         Expontentially Modified Gaussian function I (EMG)              #\n##########################################################################\n\n## EMG, simply put, is THE combination of an expontential function and a Gaussian function\n## This species model is an non-intercept form, where the asymptote of the function does not cross 0\n## The function fits a skew model, in this case to describe the performance going into lethal temperature\n## The constants are different from constants in the Gaussian function\n## a = location of the asymptote\n## b = unknown\n## c = upper lethal temperature\n## d = unknown\n## e = unknown\n\n## Create EMG function and sum negative likelihood\n## The equation for EMG can be found in Angeletta 2006 (Table Curve 2D)\nemg = function(p, N, k){ \n  a = p[1]\n  b = p[2]\n  c = p[3]\n  d = p[4]\n  e = p[5]\n  yhat = a+b*d*2.5066282746310005024*exp(d^2/(2*e^2)+(c-N)/e)*(erf((c-N)/(1.4142135623730950488*d)+d/(1.4142135623730950488*(e)))-(e)/abs((e)))/(-2.0*(e))\n  result = -sum(dnorm(k, yhat, log=TRUE)) \n}\nparnames(emg) = c(\"a\", \"b\", \"c\", \"d\", \"e\")\n\n## Predict the initial constants using maximum likelihood (from bbmle package)\nmle.emg <- mle2(emg, start = c(a = 0.012, b= 0.079, c= 20.64, d = 0.712, e = -9.9), data = list(N = temp, k = performance), method = \"Nelder-Mead\")\nsummary(mle.emg)\n\n## Replacing the predicted constants with estimated constants for the next iteration\na <- as.numeric(coef(mle.emg)[\"a\"])\nb <- as.numeric(coef(mle.emg)[\"b\"])\nc <- as.numeric(coef(mle.emg)[\"c\"])\nd <- as.numeric(coef(mle.emg)[\"d\"])\ne <- as.numeric(coef(mle.emg)[\"e\"])\n\n## maximum likelihood estimate is run 10000 times in order to find the best fit\n## AIC is used to compare the models, the best model is used for the next iteration\n\nfor (y in 1:1000) \n{\n\nmle.type2 <- mle2(emg, start = c(a = a, b= b, c= c, d = d, e = e), data = list(N = temp, k = performance), method = \"Nelder-Mead\", control = list(maxit = 10000000))\nsummary(mle.type2)\n\nAIC <- (vals.AIC <- AIC(mle.emg, mle.type2))\n\nif (AIC$AIC[2] < AIC$AIC[1]) {\n  mle.emg <- mle.type2\n}\n\na <- as.numeric(coef(mle.emg)[\"a\"])\nb <- as.numeric(coef(mle.emg)[\"b\"])\nc <- as.numeric(coef(mle.emg)[\"c\"])\nd <- as.numeric(coef(mle.emg)[\"d\"])\ne <- as.numeric(coef(mle.emg)[\"e\"])\n}\n\n## This is the final EMG function\nnewdata$emg <- a+b*d*2.5066282746310005024*exp(d^2/(2*e^2)+(c-newdata$temp)/e)*(erf((c-newdata$temp)/(1.4142135623730950488*d)+d/(1.4142135623730950488*(e)))-(e)/abs((e)))/(-2.0*(e))\n\n## plot a blue line for EMG\nlines(newdata$temp, newdata$emg, col = \"blue\", lwd=2)\n\n##calculate Topt\nTo.EMG <- newdata$temp[as.numeric(which.max(newdata$emg))]\n\n## print the estimated constants\nsummary(mle.emg)\n\n## print Topt\nTo.EMG\n\n\n##########################################################################\n#         Expontentially Modified Gaussian function II (EMG)             #\n##########################################################################\n\n## EMG, simply put, is THE combination of an expontential function and a Gaussian function\n## This species model is an non-intercept form, where the asymptote of the function does not cross 0\n## The function fits a skew model, in this case to describe the performance going into lethal temperature\n## The constants are different from constants in the Gaussian function\n## a = location of the asymptote\n## b = unknown\n## c = upper lethal temperature\n## d = unknown\n\n## Create EMG function and sum negative likelihood\n## The equation for EMG can be found in Angeletta 2006 (Table Curve 2D)\nemg = function(p, N, k){\n  a = p[1]\n  b = p[2]\n  c = p[3]\n  d = p[4]\n  yhat = a*c*2.5066282746310005024*exp(c*c/(2.0*(d)*(d))+(b-N)/(d))*(erf((b-N)/(c*c)+c/(c*(d)))-(d)/abs((d)))/(-2.0*(d))\n  result = -sum(dnorm(k, yhat, log=TRUE)) \n}\nparnames(emg) = c(\"a\", \"b\", \"c\", \"d\")\n\n## Predict the initial constants using maximum likelihood (from bbmle package)\nmle.emg <- mle2(emg, start = c(a = 0.080, b= 19.3, c= 1.00, d = -4.01), data = list(N = temp2, k = performance2), method = \"Nelder-Mead\")\n## Replacing the predicted constants with estimated constants for the next iteration\na <- as.numeric(coef(mle.emg)[\"a\"])\nb <- as.numeric(coef(mle.emg)[\"b\"])\nc <- as.numeric(coef(mle.emg)[\"c\"])\nd <- as.numeric(coef(mle.emg)[\"d\"])\n\n## maximum likelihood estimate is run 10000 times in order to find the best fit\n## AIC is used to compare the models, the best model is used for the next iteration\n\nfor (y in 1:1000) \n{\n  \n  mle.type2 <- mle2(emg, start = c(a = a, b= b, c= c, d = d), data = list(N = temp2, k = performance2), method = \"Nelder-Mead\", control = list(maxit = 10000000))\n  AIC <- (vals.AIC <- AIC(mle.emg, mle.type2))\n  \n  if (AIC$AIC[2] < AIC$AIC[1]) {\n    mle.emg <- mle.type2\n  }\n  \n  a <- as.numeric(coef(mle.emg)[\"a\"])\n  b <- as.numeric(coef(mle.emg)[\"b\"])\n  c <- as.numeric(coef(mle.emg)[\"c\"])\n  d <- as.numeric(coef(mle.emg)[\"d\"])\n}\n\n## This is the final EMG function\nnewdata$emg <- a*c*2.5066282746310005024*exp(c*c/(2.0*(d)*(d))+(b-newdata$temp)/(d))*(erf((b-newdata$temp)/(c*c)+c/(c*(d)))-(d)/abs((d)))/(-2.0*(d))\n\n## plot a blue line for EMG\nlines(newdata$temp, newdata$emg, col = \"goldenrod\", lwd=3)\n\n##calculate Topt\nTo.EMG <- newdata$temp[as.numeric(which.max(newdata$emg))]\n\n## print the estimated constants\nsummary(mle.emg)\n\n## print Topt\nTo.EMG\n\nlegend(12, 0.05, legend = c(\"Copper\", \"Quillback\"), \n        pch = c(20, 20), col = c(\"orange\", \"brown\"), lwd = c(3,3))\nlegend(12, 0.05, legend = c(\"Black\", \"Yellowtail\"), \n       pch = c(20, 20), col = c(\"black\", \"goldenrod\"), lwd = c(3,3))\n",
    "created" : 1478008055350.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3635552567",
    "id" : "ADEF8682",
    "lastKnownWriteTime" : 1478995209,
    "last_content_update" : 1478995209738,
    "path" : "~/Documents/Northeastern/Lotterhos_Lab/Field Work/2015/TPC_Experiment/Analysis/bbmle_TPC_SMS.R",
    "project_path" : "bbmle_TPC_SMS.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}