{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Activity_Data\"\nauthor: \"Sara Michele Schaal\"\ndate: \"6/2/2017\"\noutput:\n  html_document: default\n  pdf_document: default\n---\n\n## Load Relevant Packages\n```{r, echo=FALSE}\n    if(!(\"plyr\" %in% installed.packages())){\n      install.packages(\"plyr\")\n    }\n    if(!(\"dplyr\" %in% installed.packages())){\n      install.packages(\"dplyr\")\n    }\n    if(!(\"ggplot2\" %in% installed.packages())){\n      install.packages(\"ggplot2\")\n    }\n    if(!(\"scales\" %in% installed.packages())){\n      install.packages(\"scales\")\n    }\n    if(!(\"sm\" %in% installed.packages())){\n      install.packages(\"sm\")\n    }\n    if(!(\"ggpubr\" %in% installed.packages())){\n      install.packages(\"ggpubr\")\n    }\n    library(plyr)\n    library(dplyr)\n    library(ggplot2)\n    library(scales)\n    library(ggpubr)\n    library(sm)\n    \n```\n\n# Data Manipulation\n## Read in data and calculate means\n```{r}\n\n## Read in data ##\n  full.act <- read.csv(\"data/Activity/20171129_ActivityData.csv\")\n  black.temps <- read.csv(\"data/black_exp_temps.csv\")\n  copper.temps <- read.csv(\"data/copper_exp_temps.csv\")\n\n  # Subset data into two experiments  \n  black.act <- full.act[full.act$Species == \"Black\", ]\n  copper.act <- full.act[full.act$Species == \"Copper\", ]\n  \n  # Reorder data to be in numerical ascending order \n  # **(only way for loop to work properly)\n  black.temps.asc <- black.temps[order(black.temps$Bucket), ]\n  copper.temps.asc <- copper.temps[order(copper.temps$Bucket_ID), ]\n  \n  # Fill in actual mean temperature data from experiment\n  # BY complex\n  for(i in 1:16){\n    for(j in 1:nrow(black.act)){\n      if(black.act$Bucket[j] == i){\n        black.act$Temperature[j] <- black.temps.asc$mean[i]\n      }\n    }\n  }\n  \n  # CQ complex\n  for(i in 1:16){\n    for(j in 1:nrow(copper.act)){\n      if(copper.act$Bucket[j] == i){\n        copper.act$Temperature[j] <- copper.temps.asc$mean[i]\n      }\n    }\n  }\n\n  \n  # take the mean of the two watches of the same fish per viewer\n  black.act$Act_Mean_Julia <- rowMeans(black.act[, 8:9])\n  black.act$Act_Mean_Sandi <- rowMeans(black.act[, 10:11])\n  copper.act$Act_Mean_Julia <- rowMeans(copper.act[,8:9])\n  copper.act$Act_Mean_Sandi <- rowMeans(copper.act[,10:11])\n  \n``` \n\n## Calculate averages per bucket per timepoint\n```{r}\n\n### Black Rockfish ###\n\n    # create empty data frames for mean bucket activity values\n    Mean.Activity <- matrix(NA, nrow(unique(black.act[c(\"Date\", \"AM_PM\", \"Bucket\")])),4)\n    bucket.act.average <- unique(black.act[c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\")])\n    complete.act.data <- cbind(bucket.act.average, Mean.Activity)\n    colnames(complete.act.data) <- c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\", \n                                     \"mean.julia\", \"mean.sandi\", \"mean.both\", \"FishAlive\")\n    \n    # initialize the vectors that will be used in the forloop ** NOTE data in these \n    # vectors is written over in each loop.. they are TEMPORARY vectors **\n    bucket.act.julia <- NULL\n    bucket.act.sandi <- NULL\n    bucket.act.both <- NULL\n    \n    # initialize the counter for stepping through the output matrix\n    j <- 1\n    # For loop to step through data frame to get activity averages\n    for(i in 1:nrow(black.act)){\n      \n      # looping through majority of data to grab all those rows that are not the last row\n      # but are all those that equal the same bucket from the same day and getting \n      # activity averages\n      if(i != nrow(black.act) && i == 1 || \n         black.act$Bucket[i] == black.act$Bucket[i-1] && i != nrow(black.act)){\n        \n        bucket.act.julia <- c(bucket.act.julia, black.act$Act_Mean_Julia[i])\n        bucket.act.sandi <- c(bucket.act.sandi, black.act$Act_Mean_Sandi[i])\n        bucket.act.both <- c(bucket.act.both, black.act$Act_Mean_Julia[i], black.act$Act_Mean_Sandi[i])\n     \n        # special case for last row \n       } else {\n         if(i == nrow(black.act)){\n\n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA <- bucket.act.both[!is.na(bucket.act.both)]\n          bucket.act.julia.noNA <- bucket.act.julia[!is.na(bucket.act.julia)]\n          bucket.act.sandi.noNA <- bucket.act.sandi[!is.na(bucket.act.sandi)]\n          complete.act.data$mean.julia[j] <- sum(bucket.act.julia.noNA)/length(bucket.act.julia.noNA)\n          complete.act.data$mean.sandi[j] <- sum(bucket.act.sandi.noNA)/length(bucket.act.sandi.noNA)\n          complete.act.data$mean.both[j] <- sum(bucket.act.both.noNA)/length(bucket.act.both.noNA)\n          complete.act.data$FishAlive[j] <- length(bucket.act.sandi.noNA)\n          j <- j + 1\n          \n        } else {\n          \n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA <- bucket.act.both[!is.na(bucket.act.both)]\n          bucket.act.julia.noNA <- bucket.act.julia[!is.na(bucket.act.julia)]\n          bucket.act.sandi.noNA <- bucket.act.sandi[!is.na(bucket.act.sandi)]\n          \n          # Take mean of that bucket for that day and insert into complete.data dataframe\n          complete.act.data$mean.julia[j] <- sum(bucket.act.julia.noNA)/length(bucket.act.julia.noNA)\n          complete.act.data$mean.sandi[j] <- sum(bucket.act.sandi.noNA)/length(bucket.act.sandi.noNA)\n          complete.act.data$mean.both[j] <- sum(bucket.act.both.noNA)/length(bucket.act.both.noNA)\n          complete.act.data$FishAlive[j] <- length(bucket.act.sandi.noNA)\n          bucket.act.julia <- black.act$Act_Mean_Julia[i]\n          bucket.act.sandi <- black.act$Act_Mean_Sandi[i]\n          bucket.act.both <- c(black.act$Act_Mean_Julia[i], black.act$Act_Mean_Sandi[i])\n          # counter to step through inputting data into the complete.data dataframe\n          j <- j + 1\n          \n        } # close else\n       } # close if else\n      } # close for loop\n    \n### Copper Rockfish ###\n    \n    # create empty data frames for mean bucket activity values\n    Mean.Activity.cp <- matrix(NA, nrow(unique(copper.act[c(\"Date\", \"AM_PM\", \"Bucket\")])),4)\n    bucket.act.average.cp <- unique(copper.act[c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\")])\n    complete.act.data.cp <- cbind(bucket.act.average.cp, Mean.Activity.cp)\n    colnames(complete.act.data.cp) <- c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\", \n                                     \"mean.julia\", \"mean.sandi\", \"mean.both\", \"FishAlive\")\n    \n    # initialize the vectors that will be used in the for loop ** NOTE data in these vectors is written\n    # over in each loop.. they are TEMPORARY vectors **\n    bucket.act.julia.cp <- NULL\n    bucket.act.sandi.cp <- NULL\n    bucket.act.both.cp <- NULL\n    \n    bucket.act.both.noNA.cp <- NULL\n    bucket.act.julia.noNA.cp <- NULL\n    bucket.act.sandi.noNA.cp <- NULL\n    \n    # initialize the counter for stepping through the output matrix\n    j <- 1\n    i <- 1\n    # For loop to step through data frame to get activity averages\n    for(i in 1:nrow(copper.act)){\n      \n      # looping through majority of data to grab all those rows that are not the last row\n      # but are all those that equal the same bucket from the same day and getting activity averages\n      if(i != nrow(copper.act) && i == 1 || \n         copper.act$Bucket[i] == copper.act$Bucket[i-1] && i != nrow(copper.act)){\n        \n        bucket.act.julia.cp <- c(bucket.act.julia.cp, copper.act$Act_Mean_Julia[i])\n        bucket.act.sandi.cp <- c(bucket.act.sandi.cp, copper.act$Act_Mean_Sandi[i])\n        bucket.act.both.cp <- c(bucket.act.both.cp, copper.act$Act_Mean_Julia[i], copper.act$Act_Mean_Sandi[i])\n     \n        # special case for last row \n       } else {\n         if(i == nrow(copper.act)){\n\n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA.cp <- bucket.act.both.cp[!is.na(bucket.act.both.cp)]\n          bucket.act.julia.noNA.cp <- bucket.act.julia.cp[!is.na(bucket.act.julia.cp)]\n          bucket.act.sandi.noNA.cp <- bucket.act.sandi.cp[!is.na(bucket.act.sandi.cp)]\n          complete.act.data.cp$mean.julia[j] <- sum(bucket.act.julia.noNA.cp)/length(bucket.act.julia.noNA.cp)\n          complete.act.data.cp$mean.sandi[j] <- sum(bucket.act.sandi.noNA.cp)/length(bucket.act.sandi.noNA.cp)\n          complete.act.data.cp$mean.both[j] <- sum(bucket.act.both.noNA.cp)/length(bucket.act.both.noNA.cp)\n          complete.act.data.cp$FishAlive[j] <- length(bucket.act.sandi.noNA.cp)\n          j <- j + 1\n          \n        } else {\n          \n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA.cp <- bucket.act.both.cp[!is.na(bucket.act.both.cp)]\n          bucket.act.julia.noNA.cp <- bucket.act.julia.cp[!is.na(bucket.act.julia.cp)]\n          bucket.act.sandi.noNA.cp <- bucket.act.sandi.cp[!is.na(bucket.act.sandi.cp)]\n          \n          # Take mean of that bucket for that day and insert into complete.data dataframe\n          complete.act.data.cp$mean.julia[j] <- sum(bucket.act.julia.noNA.cp)/length(bucket.act.julia.noNA.cp)\n          complete.act.data.cp$mean.sandi[j] <- sum(bucket.act.sandi.noNA.cp)/length(bucket.act.sandi.noNA.cp)\n          complete.act.data.cp$mean.both[j] <- sum(bucket.act.both.noNA.cp)/length(bucket.act.both.noNA.cp)\n          complete.act.data.cp$FishAlive[j] <- length(bucket.act.sandi.noNA.cp)\n          bucket.act.julia.cp <- copper.act$Act_Mean_Julia[i]\n          bucket.act.sandi.cp <- copper.act$Act_Mean_Sandi[i]\n          bucket.act.both.cp <- c(copper.act$Act_Mean_Julia[i], copper.act$Act_Mean_Sandi[i])\n          # counter to step through inputting data into the complete.data dataframe\n          j <- j + 1\n          \n        } # close else\n       } # close if else\n      } # close for loop\n    \n```\n\n## Create a column for Days Since the Start of Experiment\n```{r}\n\n### Black Rockfish ###\n  # make column for days since start of experiment for panel headers\n  complete.act.data$Days_Since_Start <- NA\n  \n  # add a column that is Date with time of day\n  complete.act.data$Date <- as.factor(complete.act.data$Date)\n  complete.act.data$Date_Time <- as.factor(paste(complete.act.data$Date, complete.act.data$AM_PM))\n   \n  # Round temperature data to one significant figure after decimal place\n  complete.act.data$RTemperature <- round(complete.act.data$Temperature, 1)\n  complete.act.data$DayNum <- NA\n  # add in days since start of experiment column\n  for(i in 1:length(complete.act.data$Days_Since_Start)){\n    if (complete.act.data$Date_Time[i] == \"20150623 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 4 AM\"\n      complete.act.data$DayNum[i] <- 1\n    } else if (complete.act.data$Date_Time[i] == \"20150624 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 5 PM\"\n      complete.act.data$DayNum[i] <- 2\n    } else if (complete.act.data$Date_Time[i] == \"20150625 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 6 AM\"\n      complete.act.data$DayNum[i] <- 3\n    } else if (complete.act.data$Date_Time[i] == \"20150625 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 6 PM\"\n      complete.act.data$DayNum[i] <- 3.5\n    } else if (complete.act.data$Date_Time[i] == \"20150626 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 7 AM\"\n      complete.act.data$DayNum[i] <- 4\n    } else if (complete.act.data$Date_Time[i] == \"20150626 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 7 PM\"\n      complete.act.data$DayNum[i] <- 4.5\n    } else if (complete.act.data$Date_Time[i] == \"20150627 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 8 AM\"\n      complete.act.data$DayNum[i] <- 5\n    } else if (complete.act.data$Date_Time[i] == \"20150627 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 8 PM\"\n      complete.act.data$DayNum[i] <- 5.5\n    } else if (complete.act.data$Date_Time[i] == \"20150628 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 9 AM\"\n      complete.act.data$DayNum[i] <- 6\n    } else if (complete.act.data$Date_Time[i] == \"20150628 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 9 PM\"\n      complete.act.data$DayNum[i] <- 6.5\n    } else if (complete.act.data$Date_Time[i] == \"20150629 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 10 AM\"\n      complete.act.data$DayNum[i] <- 7\n    } else if (complete.act.data$Date_Time[i] == \"20150629 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 10 PM\"\n      complete.act.data$DayNum[i] <- 7.5\n    } else if (complete.act.data$Date_Time[i] == \"20150630 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 11 AM\"\n      complete.act.data$DayNum[i] <- 8\n    } else if (complete.act.data$Date_Time[i] == \"20150630 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 11 PM\"\n      complete.act.data$DayNum[i] <- 8.5\n    } else if (complete.act.data$Date_Time[i] == \"20150702 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 13 AM\"\n      complete.act.data$DayNum[i] <- 10\n    } else if (complete.act.data$Date_Time[i] == \"20150702 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 13 PM\"\n      complete.act.data$DayNum[i] <- 10.5\n    } else if(complete.act.data$Date_Time[i] == \"20150703 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 14 AM\"\n      complete.act.data$DayNum[i] <- 11\n  }\n}\n### Copper Rockfish ###\n  # Make column for Day Since Start of Experiment\n  complete.act.data.cp$Days_Since_Start <- NA\n  \n  # add a column for date time unique combinations\n  complete.act.data.cp$Date <- as.factor(complete.act.data.cp$Date)\n  complete.act.data.cp$Date_Time <- as.factor(paste(complete.act.data.cp$Date, complete.act.data.cp$AM_PM))\n  #complete.act.data.cp[157,9] <- \"Day 10 AM\" #I am not sure why this single value is going in wrong\n  #complete.act.data.cp[157,10] <- \"20150714 AM\"\n   \n  # Round temperature data to one significant figure after decimal place\n   complete.act.data.cp$RTemperature <- round(complete.act.data.cp$Temperature, 1)\n   complete.act.data.cp$DayNum <- NA\n   \n  # add in days since start of experiment column\n  for(i in 1:length(complete.act.data.cp$Days_Since_Start)){\n    if (complete.act.data.cp$Date_Time[i] == \"20150709 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 5 AM\"\n      complete.act.data.cp$DayNum[i] <- 1\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150709 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 5 PM\"\n      complete.act.data.cp$DayNum[i] <- 1.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150710 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 6 AM\"\n      complete.act.data.cp$DayNum[i] <- 2\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150710 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 6 PM\"\n      complete.act.data.cp$DayNum[i] <- 2.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150711 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 7 AM\"\n      complete.act.data.cp$DayNum[i] <- 3\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150711 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 7 PM\"\n      complete.act.data.cp$DayNum[i] <- 3.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150712 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 8 AM\"\n      complete.act.data.cp$DayNum[i] <- 4\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150712 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 8 PM\"\n      complete.act.data.cp$DayNum[i] <- 4.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150713 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 9 AM\"\n      complete.act.data.cp$DayNum[i] <- 5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150713 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 9 PM\"\n      complete.act.data.cp$DayNum[i] <- 5.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150714 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 10 AM\"\n      complete.act.data.cp$DayNum[i] <- 6\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150715 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 11 AM\"\n      complete.act.data.cp$DayNum[i] <- 7\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150715 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 11 PM\"\n      complete.act.data.cp$DayNum[i] <- 7.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150716 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 12 AM\"\n      complete.act.data.cp$DayNum[i] <- 8\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150716 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 12 PM\"\n      complete.act.data.cp$DayNum[i] <- 8.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150717 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 13 AM\"\n      complete.act.data.cp$DayNum[i] <- 9\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150717 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 13 PM\"\n      complete.act.data.cp$DayNum[i] <- 9.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150718 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 14 AM\"\n      complete.act.data.cp$DayNum[i] <- 10\n    }\n  }\n\n```\n\n# PLOTTING \n## Panel Plot Activity Across Time for each temperature and Every Date (NOT USING)\n```{r}\n  library(ggplot2)\n  # ggplot to look at activity across time across bucket treatments\n   bucket.plot <- ggplot(data=complete.act.data, \n                         aes(x=DayNum, y=mean.both, \n                            group=as.factor(RTemperature), \n                            color = as.factor(RTemperature))) + geom_point() + geom_smooth(method = \"lm\")\n   \n   bucket.plot + facet_wrap(~RTemperature) + labs(y = \"Mean Activity\") + \n     scale_color_discrete(name = \"Temperature\") + \n     ggtitle(\"Black Rockfish Activity Per Bucket Across Time\")\n   \n   bucket.plot + facet_wrap(~RTemperature) + labs(y = \"Mean Activity\", x = \"Temperature\") + \n     scale_color_gradient(low = \"gainsboro\", high = \"black\", name = \"Temperature\") + \n     theme_bw() +\n     theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"),\n           legend.position = \"none\") + \n     scale_x_continuous(\"DayNum\", breaks = pretty_breaks(), limits = c(0,11)) +\n     ggtitle(\"Black Rockfish Activity Per Bucket Across Time\")\n   \n    \n  # ggplot to look at activity across time across bucket treatments\n   bucket.plot.cp <- ggplot(data=complete.act.data.cp, \n                         aes(x=Date_Time, y=mean.both, \n                            group=as.factor(RTemperature), \n                            color = as.factor(RTemperature))) + geom_point() + geom_smooth(method = \"lm\")\n  # Create Plot\n   bucket.plot.cp + facet_wrap(~RTemperature) + labs(y = \"Mean Activity\") + \n     scale_color_discrete(name = \"Temperature\") + \n     ggtitle(\"Copper Rockfish Activity Per Bucket Across Time\")\n   \n   bucket.plot + facet_wrap(~RTemperature) + labs(y = \"Mean Activity\", x = \"Temperature\") + \n     scale_color_gradient(low = \"gainsboro\", high = \"black\", name = \"Temperature\") + \n     theme_bw() +\n     theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"),\n           legend.position = \"none\") + \n     scale_x_continuous(\"DayNum\", breaks = pretty_breaks(), limits = c(0,11)) +\n     ggtitle(\"Black Rockfish Activity Per Bucket Across Time\")\n\n```\n\n## Average Activity Across Entire Experiment (Single Figure) (NOT USING)\n```{r}\n\n## Bucket averages across experiment \n   mean.black.activity <- aggregate(complete.act.data$mean.both,list(complete.act.data$RTemperature), mean)\n   colnames(mean.black.activity) <- c(\"Temperature\", \"Mean_Activity\")\n   \n   mean.copper.activity <- aggregate(complete.act.data.cp$mean.both, list(complete.act.data.cp$RTemperature), mean)\n   colnames(mean.copper.activity) <- c(\"Temperature\", \"Mean_Activity\")\n   \n  # Plot averages\n   par(mfrow = c(1,2))\n   plot(mean.black.activity$Temperature, mean.black.activity$Mean_Activity, ylim = c(0,4),\n        xlab = \"Temperature\", ylab = \"Mean Activity\", pch = 19, bty = \"l\",\n        main = \"Black Rockfish Activity\")\n\n   plot(mean.copper.activity$Temperature, mean.copper.activity$Mean_Activity, \n        ylim = c(0,4), xlab = \"Temperature\", ylab = \"Mean Activity\", \n        pch = 19, bty = \"l\", col = \"orange\",\n        main = \"Copper Rockfish Activity\")\n   \n```\n\n## Panel Plot Activity Across Temperatures for Every Date\n```{r}\n################################################################\n#### Factor Days ###############################################\n#### to change to correct order for plotting the panel plot ####\n################################################################\n### black\n  b.unique_Days <- c(\"Day 4 AM\", \"Day 5 PM\", \"Day 6 AM\", \"Day 6 PM\", \"Day 7 AM\", \"Day 7 PM\", \n                      \"Day 8 AM\", \"Day 8 PM\", \"Day 9 AM\", \"Day 9 PM\", \"Day 10 AM\", \"Day 10 PM\", \n                      \"Day 11 AM\", \"Day 11 PM\", \"Day 13 AM\", \"Day 13 PM\", \"Day 14 AM\")\n  complete.act.data$Days_Since_Start <- as.factor(complete.act.data$Days_Since_Start)\n  complete.act.data$Days_Since_Start <- factor(complete.act.data$Days_Since_Start, \n                                               levels = b.unique_Days)\n### copper\n   c.unique_Days <- c(\"Day 5 AM\", \"Day 5 PM\", \"Day 6 AM\", \"Day 6 PM\", \"Day 7 AM\", \"Day 7 PM\",  \n                       \"Day 8 AM\", \"Day 8 PM\", \"Day 9 AM\", \"Day 9 PM\", \"Day 10 AM\", \"Day 11 AM\", \n                       \"Day 11 PM\", \"Day 12 AM\", \"Day 12 PM\", \"Day 13 AM\", \"Day 13 PM\", \"Day 14 AM\")\n   complete.act.data.cp$Days_Since_Start <- as.factor(complete.act.data.cp$Days_Since_Start)\n   complete.act.data.cp$Days_Since_Start <- factor(complete.act.data.cp$Days_Since_Start, \n                                                   levels = c.unique_Days)\n\n\n#############################\n#### Black Rockfish Plot ####\n############################# \n  # Save plot\n    day.plot <- ggplot(data=complete.act.data, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                       geom_point(aes(size = complete.act.data$FishAlive), alpha = 0.8) + \n                       geom_smooth(method = \"lm\", se = FALSE) \n    \n  # Create plot \n   bAll.panel <- day.plot + facet_wrap(~Days_Since_Start) +\n     labs(y = \"Mean Activity\", x = \"Temperature\") +\n     scale_color_gradient(low = \"gainsboro\", high = \"black\", name = \"Time\") + \n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"),\n           legend.position = \"none\") + \n     scale_x_continuous(breaks = pretty_breaks()) + \n     #scale_size(range = c(1,3))\n     scale_radius(NULL, NULL)\n   \n##############################\n#### Copper Rockfish Plot ####\n############################## \n  # Save plot\n   day.plot.cp <- ggplot(data=complete.act.data.cp, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                  geom_point(aes(size = complete.act.data.cp$FishAlive), alpha = 0.8) + \n                  geom_smooth(method = \"lm\", se = FALSE) \n  # Create plot\n   cpAll.panel <- day.plot.cp + facet_wrap(~Days_Since_Start) + \n     labs(y = \"Mean Activity\", x = \"Temperature\") + \n     scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", name = \"Time\") + \n     scale_x_continuous(NULL) +\n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"), \n           legend.position = \"none\")  +\n     scale_radius(NULL, NULL)\n\n####################################\n#### Black Rockfish Single Plot ####\n####################################\n  # Create plot\n   bAll.single <- day.plot + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"black\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 PM\", \"Day 8 AM\", \"Day 10 PM\", \"Day 13 PM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(),\n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(breaks = c(1,2,3,4), name = \"# Fish Alive\", limits = c(1,4))  +\n   guides(color = guide_colourbar(order = 1),\n          size = guide_legend(order = 2))\n   \n#####################################\n#### Copper Rockfish Single Plot ####\n#####################################\n  # Create plot\n   cpAll.single <- day.plot.cp + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 PM\", \"Day 8 AM\", \"Day 10 AM\", \"Day 13 PM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(), \n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(NULL, NULL) \n   \n   ggarrange(bAll.panel, bAll.single, cpAll.panel, cpAll.single, labels = (c(\"A\", \"B\", \"C\", \"D\")))\n\n```\n\n## Morning Data Only (NOT USING)\n```{r}\n\n#####################\n#### Subset Data ####\n#####################\n\nblack.AM <- complete.act.data[complete.act.data$AM_PM == \"AM\",]\ncopper.AM <- complete.act.data.cp[complete.act.data.cp$AM_PM == \"AM\",]\n\n#############################\n#### Black Rockfish Plot ####\n############################# \n  # Save plot\n    day.plot.AM <- ggplot(data=black.AM, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                       geom_point(aes(size = black.AM$FishAlive), alpha = 0.8) + \n                       geom_smooth(method = \"lm\", se = FALSE) \n    \n  # Create plot \n   bAM.panel <- day.plot.AM + facet_wrap(~Days_Since_Start) +\n     labs(y = \"Mean Activity\", x = \"Temperature\") +\n     scale_color_gradient(low = \"gainsboro\", high = \"black\", name = \"Time\") + \n     scale_x_continuous(NULL) +\n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"),\n           legend.position = \"none\") + \n     scale_x_continuous(breaks = pretty_breaks()) + \n     #scale_size(range = c(1,3))\n     scale_radius(NULL, NULL)\n   \n##############################\n#### Copper Rockfish Plot ####\n############################## \n  # Save plot\n   day.plot.cp.AM <- ggplot(data=copper.AM, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                  geom_point(aes(size = copper.AM$FishAlive), alpha = 0.8) + \n                  geom_smooth(method = \"lm\", se = FALSE) \n  # Create plot\n   cpAM.panel <- day.plot.cp.AM + facet_wrap(~Days_Since_Start) + \n     labs(y = \"Mean Activity\", x = \"Temperature\") + \n     scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", name = \"Time\") + \n     scale_x_continuous(NULL) +\n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"), \n           legend.position = \"none\")  +\n     scale_radius(NULL, NULL)\n\n####################################\n#### Black Rockfish Single Plot ####\n####################################\n  # Create plot\n   bAM.single <- day.plot.AM + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"black\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 AM\", \"Day 8 AM\", \"Day 10 AM\", \"Day 13 AM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(),\n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(breaks = c(1,2,3,4), name = \"# Fish Alive\", limits = c(1,4))  +\n   guides(color = guide_colourbar(order = 1),\n          size = guide_legend(order = 2))\n   \n#####################################\n#### Copper Rockfish Single Plot ####\n#####################################\n  # Create plot\n   cpAM.single <- day.plot.cp.AM + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 AM\", \"Day 8 AM\", \"Day 10 AM\", \"Day 13 AM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(), \n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(NULL, NULL) \n   \n   ggarrange(bAM.panel, bAM.single, cpAM.panel, cpAM.single, labels = (c(\"A\", \"B\", \"C\", \"D\")))\n\n\n```\n\n## Evening Data Only (NOT USING)\n```{r}\n#####################\n#### Subset Data ####\n#####################\n\nblack.PM <- complete.act.data[complete.act.data$AM_PM == \"PM\",]\ncopper.PM <- complete.act.data.cp[complete.act.data.cp$AM_PM == \"PM\",]\n\n#############################\n#### Black Rockfish Plot ####\n############################# \n  # Save plot\n    day.plot.PM <- ggplot(data=black.PM, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                       geom_point(aes(size = black.PM$FishAlive), alpha = 0.8) + \n                       geom_smooth(method = \"lm\", se = FALSE) \n    \n  # Create plot \n   bPM.panel <- day.plot.PM + facet_wrap(~Days_Since_Start) +\n     labs(y = \"Mean Activity\", x = \"Temperature\") +\n     scale_color_gradient(low = \"gainsboro\", high = \"black\", name = \"Time\") + \n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"),\n           legend.position = \"none\") + \n     scale_x_continuous(breaks = pretty_breaks()) + \n     #scale_size(range = c(1,3))\n     scale_radius(NULL, NULL)\n   \n##############################\n#### Copper Rockfish Plot ####\n############################## \n  # Save plot\n   day.plot.cp.PM <- ggplot(data=copper.PM, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                  geom_point(aes(size = copper.PM$FishAlive), alpha = 0.8) + \n                  geom_smooth(method = \"lm\", se = FALSE) \n  # Create plot\n   cpPM.panel <- day.plot.cp.PM + facet_wrap(~Days_Since_Start) + \n     labs(y = \"Mean Activity\", x = \"Temperature\") + \n     scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", name = \"Time\") + \n     scale_x_continuous(NULL) +\n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"), \n           legend.position = \"none\")  +\n     scale_radius(NULL, NULL)\n\n####################################\n#### Black Rockfish Single Plot ####\n####################################\n  # Create plot\n   bPM.single <- day.plot.PM + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"black\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 PM\", \"Day 8 PM\", \"Day 10 PM\", \"Day 13 PM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(),\n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(breaks = c(1,2,3,4), name = \"# Fish Alive\", limits = c(1,4)) + \n   guides(color = guide_colourbar(order = 1),\n          size = guide_legend(order = 2))\n   \n#####################################\n#### Copper Rockfish Single Plot ####\n#####################################\n  # Create plot\n   cpPM.single <- day.plot.cp.PM + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 PM\", \"Day 8 PM\", \"Day 10 PM\", \"Day 13 PM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(), \n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(NULL, NULL) \n   \n   ggarrange(bPM.panel, bPM.single, cpPM.panel, cpPM.single, labels = (c(\"A\", \"B\", \"C\", \"D\")))\n\n```\n\n# Regression Slopes of Activity Across Temperature over Time\n```{r}\n## black\n  # vector of unique days & empty data frames for writing slopes to\n   b.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data$Days_Since_Start)))\n \n  # Create for loop to capture slopes of regression between activity and temp for each date/time\n   for(i in 1:length(unique(complete.act.data$Days_Since_Start))){\n     b.slopes[i,1] <- lm(mean.both~RTemperature, data = complete.act.data, \n                         subset = Days_Since_Start == b.unique_Days[i])$coefficients[[2]]\n     b.slopes[i,2] <-  summary(lm(mean.both~RTemperature, data = complete.act.data, \n                                  subset = Days_Since_Start == b.unique_Days[i]))$coefficients[2,2]\n     b.slopes[i,3] <- b.slopes[i,1] - 1.96*b.slopes[i,2]\n     b.slopes[i,4] <- b.slopes[i,1] + 1.96*b.slopes[i,2]\n   } \n   output <- summary(lm(mean.both~RTemperature, data = complete.act.data, subset = Days_Since_Start == b.unique_Days[2]))\n   summary(lm(mean.both~RTemperature, data = complete.act.data, subset = Days_Since_Start == b.unique_Days[3]))$coefficients[2,2]\n   \n## copper\n  # vector of unique days & empty data frames for writing slopes to\n   c.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data.cp$Days_Since_Start)))\n   \n  # Create for loop to capture slopes of regression between activity and temp for each date/time\n   for (i in 1:length(unique(complete.act.data.cp$Days_Since_Start))){\n     c.slopes[i] <- lm(mean.both~RTemperature, data = complete.act.data.cp, \n                      subset = Days_Since_Start == c.unique_Days[i])$coefficients[[2]]\n     c.slopes[i,2] <-  summary(lm(mean.both~RTemperature, data = complete.act.data.cp, \n                                  subset = Days_Since_Start == c.unique_Days[i]))$coefficients[2,2]\n     c.slopes[i,3] <- c.slopes[i,1] - 1.96*c.slopes[i,2]\n     c.slopes[i,4] <- c.slopes[i,1] + 1.96*c.slopes[i,2]\n   } \n\n## Create plot of days since start vs slope of the activity~temp regression\n  # number unique days for scatterplot .5 increments indicate PM measurements integers are AM\n   b.unique_Days_num <- c(4, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 13, 13.5, 14)\n   c.unique_Days_num <- c(5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 11.5, 12, 12.5, 13, 13.5, 14)\n   \n  # plot\n   par(mfrow = c(1,2))\n   plot(b.slopes[ ,1]~b.unique_Days_num, type = \"l\", \n        ylim = c(min(c.slopes)-0.05, max(c.slopes)+0.05), \n        lwd = 2, bty = \"l\", ylab= \"Activity vs Temperature Regression Slope\",\n        xlab = \"Day of Experiment\")\n   points(b.slopes[ ,3]~b.unique_Days_num, type = \"l\", col = \"grey\")\n   points(b.slopes[ ,4]~b.unique_Days_num, type = \"l\", col = \"grey\")\n   abline(0,0, lty = 2)\n   legend(\"topleft\", legend = c(\"BY Complex\", \"CQ complex\"), col = c(\"black\", \"orange\"), lwd = 2)\n   mtext(text = \"A\", side = 3, adj = 0.01, padj = 0.01)\n\n   plot(c.slopes[ ,1]~c.unique_Days_num, type = \"l\", lwd = 2, col = \"orange\", \n        bty = \"l\", ylim = c(min(c.slopes)-0.05, max(c.slopes)+0.05), \n        ylab = NA, xlab = \"Day of Experiment\")\n   points(c.slopes[ ,3]~c.unique_Days_num, type = \"l\", col = \"grey\")\n   points(c.slopes[ ,4]~c.unique_Days_num, type = \"l\", col = \"grey\")\n   abline(0,0, lty = 2)\n   mtext(text = \"B\", side = 3, adj = 0.01, padj = 0.01)\n\n  \n   \n```\n\n# Regression Slopes of Activity Across Time Per Temperature\n```{r}\n## black\n  b.unique_Temp <- sort(unique(complete.act.data$RTemperature))\n   \n  # vector of unique days & empty data frames for writing slopes to\n   ttb.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data$RTemperature)))\n   \n   prac <- subset(complete.act.data, subset = complete.act.data$RTemperature == 22.6)\n   prac$DateNum <- c(1:17)\n   plot(mean.both~DateNum, data = prac)\n   abline(lm(mean.both~DateNum, data = prac))\n   summary(lm(mean.both~DateNum, data = prac))\n   \n  # Create for loop to capture slopes of regression between activity and temp for each date/time\n   for (i in 1:length(unique(complete.act.data$RTemperature))){\n     ttb.slopes[i,1] <- lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data, \n                         subset = RTemperature == b.unique_Temp[i])$coefficients[[2]]\n     ttb.slopes[i,2] <-  summary(lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data, \n                                  subset = RTemperature == b.unique_Temp[i]))$coefficients[2,2]\n     ttb.slopes[i,3] <- ttb.slopes[i,1] - 1.96*ttb.slopes[i,2]\n     ttb.slopes[i,4] <- ttb.slopes[i,1] + 1.96*ttb.slopes[i,2]\n   } \n   \n## copper\n   \n   c.unique_Temp <- sort(unique(complete.act.data.cp$RTemperature))\n  # vector of unique days & empty data frames for writing slopes to\n   ttc.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data.cp$RTemperature)))\n   \n  # Create for loop to capture slopes of regression between activity and temp for each date/time\n   for (i in 1:length(unique(complete.act.data.cp$RTemperature))){\n     ttc.slopes[i] <- lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data.cp, \n                      subset = RTemperature == c.unique_Temp[i])$coefficients[[2]]\n     ttc.slopes[i,2] <-  summary(lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data.cp, \n                                  subset = RTemperature == c.unique_Temp[i]))$coefficients[2,2]\n     ttc.slopes[i,3] <- ttc.slopes[i,1] - 1.96*ttc.slopes[i,2]\n     ttc.slopes[i,4] <- ttc.slopes[i,1] + 1.96*ttc.slopes[i,2]\n   } \n\n## Create plot of days since start vs slope of the activity~temp regression\n  # number unique days for scatterplot .5 increments indicate PM measurements integers are AM\n   b.unique_Days_num <- c(4, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 13, 13.5, 14)\n   c.unique_Days_num <- c(5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 11.5, 12, 12.5, 13, 13.5, 14)\n   \n  # plot\n   par(mfrow = c(1,2))\n   plot(ttb.slopes[ ,1]~b.unique_Temp, type = \"l\", \n        lwd = 2, bty = \"l\", ylab= \"Activity vs Day Regression Slope\",\n        xlab = \"Temperature\", ylim = c(-0.3, 0.2))\n   points(ttb.slopes[ ,3]~ttb.unique_Days_num, type = \"l\", col = \"grey\")\n   points(ttb.slopes[ ,4]~ttb.unique_Days_num, type = \"l\", col = \"grey\")\n   abline(0,0, lty = 2)\n   \n   plot(ttc.slopes[ ,1]~c.unique_Temp, type = \"l\", lwd = 2, col = \"orange\", \n        bty = \"l\", ylim = c(min(ttc.slopes)-0.05, max(ttc.slopes)+0.05), \n        ylab = NA, xlab = \"Day of Experiment\")\n   points(ttc.slopes[ ,3]~c.unique_Days_num, type = \"l\", col = \"grey\")\n   points(ttc.slopes[ ,4]~c.unique_Days_num, type = \"l\", col = \"grey\")\n   abline(0,0, lty = 2)\n   legend(\"topright\", legend = c(\"BY Complex\", \"CQ complex\"), col = c(\"black\", \"orange\"), lwd = 2)\n   \n\n```\n\n# ANALYSIS \n## Negative Exponential (NOT USING)\n```{r}\n\n# Set Variables\n    x <- mean.black.activity$Temperature\n    y <- mean.black.activity$Mean_Activity\n    b <- 4\n    m <- 0.01\n    #y = b - exp(m*x)\n    \n# Build Model\n    m1 <- nls(y~b-exp(m*x), start = c(b = b, m = m))\n    \n# Goodness of fit\n    cor(y,predict(m1))\n\n# Plot data with nls predicted fit\n    plot(mean.black.activity$Temperature, mean.black.activity$Mean_Activity, ylim = c(0,4),\n          xlab = \"Temperature\", ylab = \"Mean Activity\", pch = 19, bty = \"l\",\n          main = \"Black Rockfish Activity\")\n    lines(x,predict(m1),col=\"black\",lty=1,lwd=2)\n    text(14, 1, labels = \"0.05 +/- 0.0082***\")\n    text(14, 0.7, labels = \"y ~ b - exp(m*x)\")\n    summary(m1)\n\n#######################\n### Copper Rockfish ###\n#######################\n    \n # Set Variables\n    xx <- mean.copper.activity$Temperature\n    yy <- mean.copper.activity$Mean_Activity\n    bb <- 3.5\n    mm <- 0.01\n    #y = b - exp(m*x)\n    \n # Build Model\n    m1.cp <- nls(yy~bb-exp(mm*xx), start = c(bb = bb, mm = mm))\n    \n # Goodness of fit\n    cor(yy,predict(m1.cp))\n       \n # Plot data with nls Predicted fit   \n     plot(mean.copper.activity$Temperature, mean.copper.activity$Mean_Activity, \n        ylim = c(0,4), xlab = \"Temperature\", ylab = \"Mean Activity\", \n        pch = 19, bty = \"l\", col = \"orange\",\n        main = \"Copper Rockfish Activity\")\n    lines(xx,predict(m1.cp),col=\"orange\",lty=1,lwd=2)\n    text(14, 1, labels = \"0.0499 +/- 0.0090***\")\n    text(14, 0.7, labels = \"y ~ b - exp(m*x)\")\n    summary(m1.cp)\n\n```\n\n## General Linearized Models (GLMs) (NOT USING)\n```{r}\n\nblk.act.m1 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + complete.act.data$Date_Time + complete.act.data$Temperature*complete.act.data$Date_Time)\nsummary(aov(blk.act.m1))\n\nblk.act.m2 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + complete.act.data$Date_Time)\nsummary(aov(blk.act.m2))\nsummary(blk.act.m2) \n\n\ncop.act.m1 <- lm(complete.act.data.cp$mean.both~complete.act.data.cp$Temperature + complete.act.data.cp$Date_Time + complete.act.data.cp$Temperature*complete.act.data.cp$Date_Time)\nsummary(aov(cop.act.m1)) # why isn't the interaction significant??\n\ndrop1(cop.act.m1)\ncop.act.m2 <- lm(complete.act.data.cp$mean.both~complete.act.data.cp$Temperature + complete.act.data.cp$Date_Time)\nsummary(cop.act.m2)\n\n\n\n```\n\n## Edit date/time to be in POSIX form\n```{r}\n## Construct AM/PM to be times\n  complete.act.data$AM_PMTime <- complete.act.data$AM_PM\n  complete.act.data$AM_PMTime <- revalue(complete.act.data$AM_PMTime, \n                                         c(\"AM\" = \"09:00:00\", \"PM\" = \"18:00:00\"))\n  complete.act.data.cp$AM_PMTime <- complete.act.data.cp$AM_PM\n  complete.act.data.cp$AM_PMTime <- revalue(complete.act.data.cp$AM_PMTime, \n                                            c(\"AM\" = \"09:00:00\", \"PM\" = \"18:00:00\"))\n## Create POSIX\n  complete.act.data$DateTimePOS <- \n    as.POSIXlt(paste(as.Date(as.character(complete.act.data$Date),\n                             format = (\"%Y%m%d\")),\n                     as.character(complete.act.data$AM_PMTime)))\n  complete.act.data.cp$DateTimePOS <-\n    as.POSIXlt(paste(as.Date(as.character(complete.act.data.cp$Date), \n                             format = (\"%Y%m%d\")),\n                     as.character(complete.act.data.cp$AM_PMTime)))\n```\n\n## Run models for full dataset with Species as a factor\n```{r}\n##################################\n#### Data Manipulation ###########\n### Combine Species DataFrames ###\n  species <- rep(\"Black\", 259)\n  species.cp <- rep(\"Copper\", 271)\n  complete.act.data.sp <- cbind(complete.act.data, species)\n  complete.act.data.cp.sp <- cbind(complete.act.data.cp, species.cp)\n  colnames(complete.act.data.cp.sp)[15] <- \"species\"\n  full.act.data <- rbind(complete.act.data.sp,complete.act.data.cp.sp)\n  \n################################################\n#### Models ####################################\n### Full Model: species*temp*time 3-way interaction\n  species.act.m1 <- lm(full.act.data$mean.both ~\n                         full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n    summary(species.act.m1)\n    summary(aov(species.act.m1))\n    \n    hist(full.act.data$mean.both)\n   \n## Test Assumptions  \n  # Autocorrelation: Because this is a repeated measures \n  acf(species.act.m1$residuals) # No autocorrelation\n  par(mfrow = c(2,2))\n  plot(species.act.m1)\n  qqnorm(species.act.m1$residuals)\n  qqline(species.act.m1$residuals)\n  hist(species.act.m1$residuals)\n  shapiro.test(species.act.m1$residuals)\n  blk <- full.act.data[full.act.data$species == \"Black\", ]\n  hist(blk$mean.both)\n  cp <- full.act.data[full.act.data$species == \"Copper\", ]\n  hist(cp$mean.both)\n\n# Log 10 - Does not improve\n  species.act.m1Log <- lm(log10(full.act.data$mean.both + 10) ~\n                         full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m1Log)\n  summary(aov(species.act.m1Log))\n  \n  # Assumptions\n  par(mfrow = c(2,2))\n  plot(species.act.m1Log)\n  par(mfrow = c(1,1))\n  qqnorm(species.act.m1Log$residuals)\n  qqline(species.act.m1Log$residuals)\n  hist(species.act.m1Log$residuals)\n  shapiro.test(species.act.m1Log$residuals)\n  \n## Square Root - Makes it way worse\n  species.act.m1SR <- lm(sqrt(full.act.data$mean.both) ~\n                         full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m1SR)\n  summary(aov(species.act.m1SR))\n  \n  # Assumptions\n  par(mfrow = c(2,2))\n  plot(species.act.m1SR)\n  par(mfrow = c(1,1))\n  qqnorm(species.act.m1SR$residuals)\n  qqline(species.act.m1SR$residuals)\n  hist(species.act.m1SR$residuals)\n  shapiro.test(species.act.m1SR$residuals)\n  \n## Square\n  species.act.m1SQ <- lm((full.act.data$mean.both)^2 ~\n                         full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m1SQ)\n  summary(aov(species.act.m1SQ))\n  \n  # Assumptions\n  par(mfrow = c(2,2))\n  plot(species.act.m1SQ)\n  par(mfrow = c(1,1))\n  qqnorm(species.act.m1SQ$residuals)\n  qqline(species.act.m1SQ$residuals)\n  hist(species.act.m1SQ$residuals)\n  shapiro.test(species.act.m1SQ$residuals)\n  \n  \n \n### Second Model Set: Time*Species & Temp*Species\n  species.act.m2 <- lm((full.act.data$mean.both)^2~as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m2)\n  summary(aov(species.act.m2))\n  par(mfrow = c(2,2))\n  plot(species.act.m2)\n  hist(species.act.m2$residuals)\n  shapiro.test(species.act.m2$residuals)\n  \n  species.act.m3 <- lm(full.act.data$mean.both~full.act.data$Temperature*full.act.data$species)\n  summary(species.act.m3)\n  summary(aov(species.act.m3))\n  \n### Third Model Set: Separate out Species\n ## Black Rockfish\n  blk.act.m1 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + \n                     as.numeric(complete.act.data$DateTimePOS) + \n                     complete.act.data$Temperature*as.numeric(complete.act.data$DateTimePOS))\n  summary(aov(blk.act.m1))\n  summary(blk.act.m1)\n  drop1(blk.act.m1)\n  \n  blk.act.m2 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + as.numeric(complete.act.data$DateTimePOS))\n  summary(aov(blk.act.m2))\n  drop1(blk.act.m2)\n  \n ## Copper Rockfish\n  cp.act.m1 <- lm(complete.act.data.cp$mean.both~complete.act.data.cp$Temperature + \n                     as.numeric(complete.act.data.cp$DateTimePOS) + \n                     complete.act.data.cp$Temperature*as.numeric(complete.act.data.cp$DateTimePOS))\n  summary(aov(cop.act.m1))\n  summary(cop.act.m1)\n  drop1(cop.act.m1)\n\n```\n\n\n## Monte Carlo\n```{r}\n\n\n####################\n#### Full Model ####\n####################\nalpha <- 0.05  # for 95% confidence interval\nbootstrap <- 999\nnew_act <- numeric(length(bootstrap))\nfvalues <- matrix(nrow = 999, ncol = 7)\ncolnames(fvalues) <- c(\"Temp\", \"Time\", \"Species\", \"Temp*Time\", \"Temp*Species\", \"Time*Species\", \"Temp*Time*Species\")\n\nfor(i in 1:bootstrap){\n  #new_y <- sample(full.act.data$mean.both, replace = TRUE)\n  new_act <- lm(sample(full.act.data$mean.both) ~ sample(full.act.data$Temperature)*sample(as.numeric(full.act.data$DateTimePOS))*sample(full.act.data$species))\n  fvalues[i,] <- summary(aov(new_act))[[1]][[\"F value\"]][1:7]\n}\n\nfvalues <- as.data.frame(fvalues)\nfval.means <- colMeans(fvalues)\nlowCI <- numeric(length(ncol(fvalues)))\nupCI <- numeric(length(ncol(fvalues)))\nfor(i in 1:ncol(fvalues)){\n  lowCI[i] <- quantile(fvalues[,i], alpha/2, type = 1)\n  upCI[i] <- quantile(fvalues[,i], 1-alpha/2, type = 1)\n}\n\nmont.carloData <- cbind(fval.means, lowCI, upCI, summary(aov(species.act.m1))[[1]][[\"F value\"]][1:7])\nmont.carloData\n\n##########################\n#### BY Complex Model ####\n##########################\nalpha <- 0.05  # for 95% confidence interval\nbootstrap <- 999\nnew_act.by <- numeric(length(bootstrap))\nfvalues.by <- matrix(nrow = 999, ncol = 7)\ncolnames(fvalues.by) <- c(\"Temp\", \"Time\", \"Species\", \"Temp*Time\", \"Temp*Species\", \"Time*Species\", \"Temp*Time*Species\")\n\nfor(i in 1:bootstrap){\n  #new_y <- sample(full.act.data$mean.both, replace = TRUE)\n  new_act.by <- lm(sample(complete.act.data$mean.both)~sample(complete.act.data$Temperature) + \n                     sample(as.numeric(complete.act.data$DateTimePOS)) + \n                     sample(complete.act.data$Temperature*as.numeric(complete.act.data$DateTimePOS)))\n  fvalues.by[i,] <- summary(aov(new_act.by))[[1]][[\"F value\"]][1:7]\n}\n\nfvalues.by <- as.data.frame(fvalues.by)\nfval.means.by <- colMeans(fvalues.by)\nlowCI.by <- numeric(length(ncol(fvalues.by)))\nupCI.by <- numeric(length(ncol(fvalues.by)))\nfor(i in 1:ncol(fvalues.by)){\n  lowCI.by[i] <- quantile(fvalues.by[,i], alpha/2, type = 1)\n  upCI.by[i] <- quantile(fvalues.by[,i], 1-alpha/2, type = 1)\n}\n\nmont.carloData.by <- cbind(fval.means.by, lowCI.by, upCI.by, summary(aov(blk.act.m1))[[1]][[\"F value\"]][1:3])\nmont.carloData.by\n\n##########################\n#### CQ Complex Model ####\n##########################\nalpha <- 0.001  # for 95% confidence interval\nbootstrap <- 999\nnew_act.cq <- numeric(length(bootstrap))\nfvalues.cq <- matrix(nrow = 999, ncol = 3)\ncolnames(fvalues.cq) <- c(\"Temp\", \"Time\",\"Temp*Time\")\n\nfor(i in 1:bootstrap){\n  #new_y <- sample(full.act.data$mean.both, replace = TRUE)\n  new_act.cq <- lm(sample(complete.act.data.cp$mean.both)~sample(complete.act.data.cp$Temperature) + \n                     sample(as.numeric(complete.act.data.cp$DateTimePOS)) + \n                     sample(complete.act.data.cp$Temperature*as.numeric(complete.act.data.cp$DateTimePOS)))\n  fvalues.cq[i,] <- summary(aov(new_act.cq))[[1]][[\"F value\"]][1:3]\n}\n\nfvalues.cq <- as.data.frame(fvalues.cq)\nfval.means.cq <- colMeans(fvalues.cq)\nlowCI.cq <- numeric(length(ncol(fvalues.cq)))\nupCI.cq <- numeric(length(ncol(fvalues.cq)))\nfor(i in 1:ncol(fvalues.cq)){\n  lowCI.cq[i] <- quantile(fvalues.cq[,i], alpha/2, type = 1)\n  upCI.cq[i] <- quantile(fvalues.cq[,i], 1-alpha/2, type = 1)\n}\n\nmont.carloData.cq <- cbind(fval.means.cq, lowCI.cq, upCI.cq, summary(aov(cp.act.m1))[[1]][[\"F value\"]][1:3])\nmont.carloData.cq\n```\n\n## Plots to understand interactions\n```{r}\n##################################################\n#### Temperature by Species 2-Way Interaction ####\n##################################################\n\n  plot(full.act.data$mean.both[full.act.data$species == \"Black\"]~\n           full.act.data$Temperature[full.act.data$species == \"Black\"],\n       pch = 19, col = \"black\")\n  abline(lm(full.act.data$mean.both[full.act.data$species == \"Black\"]~\n              full.act.data$Temperature[full.act.data$species == \"Black\"]),\n         lwd = 3)\n  legend(\"bottomleft\", legend = \"BY Complex\", pch = 19, cex = 0.8)\n  mtext(text = \"A\", side = 3, adj = 0.01, padj = 0.01)\n  plot(full.act.data$mean.both[full.act.data$species == \"Copper\"]~\n         full.act.data$Temperature[full.act.data$species == \"Copper\"], \n       pch = 19, col = \"orange\")\n  abline(lm(full.act.data$mean.both[full.act.data$species == \"Copper\"]~\n              full.act.data$Temperature[full.act.data$species == \"Copper\"]), \n         col = \"orange\", lwd = 3)\n  legend(\"bottomleft\", legend = \"CQ Complex\", pch = 19, \n         col = \"orange\", cex = 0.8)\n  mtext(text = \"B\", side = 3, adj = 0.01, padj = 0.01)\n  mtext(\"Mean Activity\", side = 2, outer = TRUE, cex = 1, line = 2.2)\n  mtext(expression(paste('Treatment Temperature (',degree,'C)',sep='')), side = 1, \n        outer = TRUE, cex = 1, line = 2.2)\n\n###########################################\n#### Time by Species 2-Way Interaction ####\n###########################################\n  BY.time <- lm(full.act.data$mean.both[full.act.data$species == \"Black\"]~\n              as.numeric(full.act.data$DateTimePOS[full.act.data$species == \"Black\"]))\n  summary(BY.time)\n  CQ.time <- lm(full.act.data$mean.both[full.act.data$species == \"Copper\"]~\n              as.numeric(full.act.data$DateTimePOS[full.act.data$species == \"Copper\"]))\n  summary(CQ.time)\n  \n plot(full.act.data$mean.both[full.act.data$species == \"Black\"]~\n           as.numeric(full.act.data$DateTimePOS[full.act.data$species == \"Black\"]),\n       pch = 19, col = \"black\", xaxt = \"n\")\n abline(BY.time, lwd = 3)\n axis(1, at = c(1435200000, 1435400000, 1435600000, 1435800000), \n      labels = c(\"Day 5\", \"Day 7\", \"Day 10\", \"Day 13\"))\n #legend(\"bottomleft\", legend = \"BY Complex\", pch = 19, cex = 0.8)\n  mtext(text = \"A\", side = 3, adj = 0.01, padj = 0.01)\n plot(full.act.data$mean.both[full.act.data$species == \"Copper\"]~\n           as.numeric(full.act.data$DateTimePOS[full.act.data$species == \"Copper\"]),\n       pch = 19, col = \"orange\", xaxt = \"n\")\n axis(1, at = c(1436600000, 1436800000, 1437000000, 1437200000), \n      labels = c(\"Day 5\", \"Day 7\", \"Day 10\", \"Day 13\"))\n abline(CQ.time,lwd = 3, col = \"orange\")\n #legend(\"bottomleft\", legend = \"CQ Complex\", pch = 19, cex = 0.8, col = \"orange\")\n  mtext(text = \"B\", side = 3, adj = 0.01, padj = 0.01)\n  mtext(\"Mean Activity\", side = 2, outer = TRUE, cex = 1, line = 2.2)\n  mtext(\"Time\", side = 1, outer = TRUE, cex = 1, line = 2.2)\n  \n#############################\n#### Time by Temperature ####\n#############################\n  \n```\n\n```{r}\n## sm ANCOVA or fANCOVA: try and see what it shows to help account for the non-linearity in our residuals\n \n   x <- cbind(as.numeric(full.act.data$DateTimePOS), full.act.data$Temperature)\n  ## sm ANCOVA\n  ### Bowman and Azzalini Applied Smoothing Techniques for Data Analysis: \n  ## The Kernel Approach with S-Plus Illustrations\n   ## This essentially compares the curves of each group and tests the null that they are the same \n   ## Does smoothing actually account for the normality assumption\n  sm.ancova(x, full.act.data$mean.both, full.act.data$species, model = \"parallel\")\n\n ## fANCOVA\n ## Can apply a loess smoothing nonparametric analysis loess.ancova which uses a loess smoother\n  loess.ancova(x, full.act.data$mean.both, full.act.data$species)\n \n```\n\n## Quades Method - Quade, D. (1967). Rank analysis of covariance. Journal of the American Statistical Association, 62(320), 1187-1200. \n```{r}\n\n# Transform the CYL and MPG to Ranks\nmtcars$cylRank <- rank(mtcars$cyl)\nmtcars$mpgRank <- rank(mtcars$mpg)\n\n# Convert to Ranks to Deviation Scores\nmtcars$cylDev <- mtcars$cylRank - mean(mtcars$cylRank )\nmtcars$mpgDev <- mtcars$mpgRank - mean(mtcars$mpgRank )\n\n# Spearman Correlation\ncor.1 <- with(mtcars, cor(mpgRank , cylRank , method=\"spearman\"))\n\n# Deviation Rank of MPG is Predicted from the Deviation Rank of CYL\nmtcars$est.mpg <- mtcars$cylDev * cor.1\n\n# Predicted Deviation Rank of MPG is Subtracted from the Observed Deviation Rank of CYL\nmtcars$mpg.resid <- mtcars$est.mpg - mtcars$mpgDev\n\n# ANOVA on the Residual Deviation Rank Scores\nsummary(aov(mpg.resid ~ am, mtcars))\n\n\n# Transform Time and Temp and activity\nfull.act.data$actRank <- rank(full.act.data$mean.both)\nfull.act.data$tempRank <- rank(full.act.data$Temperature)\nfull.act.data$timeRank <- rank(as.numeric(full.act.data$DateTimePOS))\n\n# Spearman Correlation\n\n```",
    "created" : 1538491222481.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "417|6|437|0|\n440|6|543|0|\n546|6|639|0|\n642|6|732|0|\n796|6|858|0|\n862|6|913|0|\n916|6|935|0|\n",
    "hash" : "3432267457",
    "id" : "86DD3F38",
    "lastKnownWriteTime" : 1557412985,
    "last_content_update" : 1557442639820,
    "path" : "~/Documents/Northeastern/LotterhosLab/Research/Field_Work/2015/TPC_Experiment/Analysis/Activity_Data.Rmd",
    "project_path" : "Activity_Data.Rmd",
    "properties" : {
        "chunk_output_type" : "console",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}