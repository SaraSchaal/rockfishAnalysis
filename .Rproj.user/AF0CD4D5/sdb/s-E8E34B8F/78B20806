{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Activity_Data_Analysis\"\nauthor: \"Sara Michele Schaal\"\ndate: \"5/9/2019\"\noutput: html_document\n---\n\n## Load Relevant Packages\n```{r, echo=FALSE}\n    if(!(\"plyr\" %in% installed.packages())){\n      install.packages(\"plyr\")\n    }\n    if(!(\"dplyr\" %in% installed.packages())){\n      install.packages(\"dplyr\")\n    }\n    if(!(\"ggplot2\" %in% installed.packages())){\n      install.packages(\"ggplot2\")\n    }\n    if(!(\"scales\" %in% installed.packages())){\n      install.packages(\"scales\")\n    }\n    if(!(\"sm\" %in% installed.packages())){\n      install.packages(\"sm\")\n    }\n    if(!(\"ggpubr\" %in% installed.packages())){\n      install.packages(\"ggpubr\")\n    }\n\n  library(plyr)\n  library(dplyr)\n  library(ggplot2)\n  library(scales)\n  library(ggpubr)\n  library(sm)\n```\n\n\n# Data Manipulation\n## Read in Data and Calculate Means\n```{r}\n\n## Read in data ##\n  full.act <- read.csv(\"data/Activity/20171129_ActivityData.csv\")\n  black.temps <- read.csv(\"data/black_exp_temps.csv\")\n  copper.temps <- read.csv(\"data/copper_exp_temps.csv\")\n\n  # Subset data into two experiments  \n  black.act <- full.act[full.act$Species == \"Black\", ]\n  copper.act <- full.act[full.act$Species == \"Copper\", ]\n  \n  # Reorder data to be in numerical ascending order \n  # **(only way for loop to work properly)\n  black.temps.asc <- black.temps[order(black.temps$Bucket), ]\n  copper.temps.asc <- copper.temps[order(copper.temps$Bucket_ID), ]\n  \n  # Fill in actual mean temperature data from experiment\n  # BY complex\n  for(i in 1:16){\n    for(j in 1:nrow(black.act)){\n      if(black.act$Bucket[j] == i){\n        black.act$Temperature[j] <- black.temps.asc$mean[i]\n      }\n    }\n  }\n  \n  # CQ complex\n  for(i in 1:16){\n    for(j in 1:nrow(copper.act)){\n      if(copper.act$Bucket[j] == i){\n        copper.act$Temperature[j] <- copper.temps.asc$mean[i]\n      }\n    }\n  }\n\n  \n  # take the mean of the two watches of the same fish per viewer\n  black.act$Act_Mean_Julia <- rowMeans(black.act[, 8:9])\n  black.act$Act_Mean_Sandi <- rowMeans(black.act[, 10:11])\n  copper.act$Act_Mean_Julia <- rowMeans(copper.act[,8:9])\n  copper.act$Act_Mean_Sandi <- rowMeans(copper.act[,10:11])\n  \n``` \n\n## Calculate Activity Averages per Bucket per Timepoint\n```{r}\n#############################\n#### BY Complex Rockfish ####\n#############################\n    # create empty data frames for mean bucket activity values\n    Mean.Activity <- matrix(NA, nrow(unique(black.act[c(\"Date\", \"AM_PM\", \"Bucket\")])),4)\n    bucket.act.average <- unique(black.act[c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\")])\n    complete.act.data <- cbind(bucket.act.average, Mean.Activity)\n    colnames(complete.act.data) <- c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\", \n                                     \"mean.julia\", \"mean.sandi\", \"mean.both\", \"FishAlive\")\n    \n    # initialize the vectors that will be used in the forloop ** NOTE data in these \n    # vectors is written over in each loop.. they are TEMPORARY vectors **\n    bucket.act.julia <- NULL\n    bucket.act.sandi <- NULL\n    bucket.act.both <- NULL\n    \n    # initialize the counter for stepping through the output matrix\n    j <- 1\n    # For loop to step through data frame to get activity averages\n    for(i in 1:nrow(black.act)){\n      \n      # looping through majority of data to grab all those rows that are not the last row\n      # but are all those that equal the same bucket from the same day and getting \n      # activity averages\n      if(i != nrow(black.act) && i == 1 || \n         black.act$Bucket[i] == black.act$Bucket[i-1] && i != nrow(black.act)){\n        \n        bucket.act.julia <- c(bucket.act.julia, black.act$Act_Mean_Julia[i])\n        bucket.act.sandi <- c(bucket.act.sandi, black.act$Act_Mean_Sandi[i])\n        bucket.act.both <- c(bucket.act.both, black.act$Act_Mean_Julia[i],\n                             black.act$Act_Mean_Sandi[i])\n     \n        # special case for last row \n       } else {\n         if(i == nrow(black.act)){\n\n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA <- bucket.act.both[!is.na(bucket.act.both)]\n          bucket.act.julia.noNA <- bucket.act.julia[!is.na(bucket.act.julia)]\n          bucket.act.sandi.noNA <- bucket.act.sandi[!is.na(bucket.act.sandi)]\n          complete.act.data$mean.julia[j] <-\n            sum(bucket.act.julia.noNA)/length(bucket.act.julia.noNA)\n          complete.act.data$mean.sandi[j] <-\n            sum(bucket.act.sandi.noNA)/length(bucket.act.sandi.noNA)\n          complete.act.data$mean.both[j] <-\n            sum(bucket.act.both.noNA)/length(bucket.act.both.noNA)\n          complete.act.data$FishAlive[j] <- length(bucket.act.sandi.noNA)\n          j <- j + 1\n          \n        } else {\n          \n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA <- bucket.act.both[!is.na(bucket.act.both)]\n          bucket.act.julia.noNA <- bucket.act.julia[!is.na(bucket.act.julia)]\n          bucket.act.sandi.noNA <- bucket.act.sandi[!is.na(bucket.act.sandi)]\n          \n          # Take mean of that bucket for that day and insert into complete.data dataframe\n          complete.act.data$mean.julia[j] <-\n            sum(bucket.act.julia.noNA)/length(bucket.act.julia.noNA)\n          complete.act.data$mean.sandi[j] <-\n            sum(bucket.act.sandi.noNA)/length(bucket.act.sandi.noNA)\n          complete.act.data$mean.both[j] <-\n            sum(bucket.act.both.noNA)/length(bucket.act.both.noNA)\n          complete.act.data$FishAlive[j] <- length(bucket.act.sandi.noNA)\n          bucket.act.julia <- black.act$Act_Mean_Julia[i]\n          bucket.act.sandi <- black.act$Act_Mean_Sandi[i]\n          bucket.act.both <- c(black.act$Act_Mean_Julia[i], black.act$Act_Mean_Sandi[i])\n          # counter to step through inputting data into the complete.data dataframe\n          j <- j + 1\n          \n        } # close else\n       } # close if else\n      } # close for loop\n    \n#############################\n#### CQ Complex Rockfish ####\n#############################\n    # create empty data frames for mean bucket activity values\n    Mean.Activity.cp <- matrix(NA, nrow(unique(copper.act[c(\"Date\", \"AM_PM\", \"Bucket\")])),4)\n    bucket.act.average.cp <- unique(copper.act[c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\")])\n    complete.act.data.cp <- cbind(bucket.act.average.cp, Mean.Activity.cp)\n    colnames(complete.act.data.cp) <- c(\"Date\", \"AM_PM\", \"Bucket\", \"Temperature\", \n                                     \"mean.julia\", \"mean.sandi\", \"mean.both\", \"FishAlive\")\n    \n    # initialize the vectors that will be used in the for loop \n    #** NOTE data in these vectors is written\n    # over in each loop.. they are TEMPORARY vectors **\n    bucket.act.julia.cp <- NULL\n    bucket.act.sandi.cp <- NULL\n    bucket.act.both.cp <- NULL\n    \n    bucket.act.both.noNA.cp <- NULL\n    bucket.act.julia.noNA.cp <- NULL\n    bucket.act.sandi.noNA.cp <- NULL\n    \n    # initialize the counter for stepping through the output matrix\n    j <- 1\n    i <- 1\n    # For loop to step through data frame to get activity averages\n    for(i in 1:nrow(copper.act)){\n      \n      # looping through data to grab all those rows that are not the last row\n      # but are all those that equal the same bucket from the same day\n      # then calculate activity averages on those rows\n      if(i != nrow(copper.act) && i == 1 || \n         copper.act$Bucket[i] == copper.act$Bucket[i-1] && i != nrow(copper.act)){\n        \n        bucket.act.julia.cp <- c(bucket.act.julia.cp, copper.act$Act_Mean_Julia[i])\n        bucket.act.sandi.cp <- c(bucket.act.sandi.cp, copper.act$Act_Mean_Sandi[i])\n        bucket.act.both.cp <- c(bucket.act.both.cp, copper.act$Act_Mean_Julia[i], \n                                copper.act$Act_Mean_Sandi[i])\n     \n        # special case for last row \n       } else {\n         if(i == nrow(copper.act)){\n\n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA.cp <- bucket.act.both.cp[!is.na(bucket.act.both.cp)]\n          bucket.act.julia.noNA.cp <- bucket.act.julia.cp[!is.na(bucket.act.julia.cp)]\n          bucket.act.sandi.noNA.cp <- bucket.act.sandi.cp[!is.na(bucket.act.sandi.cp)]\n          complete.act.data.cp$mean.julia[j] <-\n            sum(bucket.act.julia.noNA.cp)/length(bucket.act.julia.noNA.cp)\n          complete.act.data.cp$mean.sandi[j] <-\n            sum(bucket.act.sandi.noNA.cp)/length(bucket.act.sandi.noNA.cp)\n          complete.act.data.cp$mean.both[j] <-\n            sum(bucket.act.both.noNA.cp)/length(bucket.act.both.noNA.cp)\n          complete.act.data.cp$FishAlive[j] <- length(bucket.act.sandi.noNA.cp)\n          j <- j + 1\n          \n        } else {\n          \n          # Remove any NAs before taking mean for a bucket at a timepoint\n          bucket.act.both.noNA.cp <- bucket.act.both.cp[!is.na(bucket.act.both.cp)]\n          bucket.act.julia.noNA.cp <- bucket.act.julia.cp[!is.na(bucket.act.julia.cp)]\n          bucket.act.sandi.noNA.cp <- bucket.act.sandi.cp[!is.na(bucket.act.sandi.cp)]\n          \n          # Take mean of that bucket for that day and insert into complete.data dataframe\n          complete.act.data.cp$mean.julia[j] <-\n            sum(bucket.act.julia.noNA.cp)/length(bucket.act.julia.noNA.cp)\n          complete.act.data.cp$mean.sandi[j] <-\n            sum(bucket.act.sandi.noNA.cp)/length(bucket.act.sandi.noNA.cp)\n          complete.act.data.cp$mean.both[j] <-\n            sum(bucket.act.both.noNA.cp)/length(bucket.act.both.noNA.cp)\n          complete.act.data.cp$FishAlive[j] <- length(bucket.act.sandi.noNA.cp)\n          bucket.act.julia.cp <- copper.act$Act_Mean_Julia[i]\n          bucket.act.sandi.cp <- copper.act$Act_Mean_Sandi[i]\n          bucket.act.both.cp <- c(copper.act$Act_Mean_Julia[i], copper.act$Act_Mean_Sandi[i])\n          # counter to step through inputting data into the complete.data dataframe\n          j <- j + 1\n          \n        } # close else\n       } # close if else\n      } # close for loop\n```\n\n## Create a column for Days Since the Start of Experiment\n```{r}\n\n#############################\n#### BY Complex Rockfish ####\n#############################\n  # make column for days since start of experiment for panel headers\n  complete.act.data$Days_Since_Start <- NA\n  \n  # add a column that is Date with time of day\n  complete.act.data$Date <- as.factor(complete.act.data$Date)\n  complete.act.data$Date_Time <- as.factor(paste(complete.act.data$Date,\n                                                 complete.act.data$AM_PM))\n   \n  # round temperature data to one significant figure after decimal place\n  complete.act.data$RTemperature <- round(complete.act.data$Temperature, 1)\n  complete.act.data$DayNum <- NA\n  \n  # add in days since start of experiment column\n  for(i in 1:length(complete.act.data$Days_Since_Start)){\n    if (complete.act.data$Date_Time[i] == \"20150623 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 4 AM\"\n      complete.act.data$DayNum[i] <- 1\n    } else if (complete.act.data$Date_Time[i] == \"20150624 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 5 PM\"\n      complete.act.data$DayNum[i] <- 2\n    } else if (complete.act.data$Date_Time[i] == \"20150625 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 6 AM\"\n      complete.act.data$DayNum[i] <- 3\n    } else if (complete.act.data$Date_Time[i] == \"20150625 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 6 PM\"\n      complete.act.data$DayNum[i] <- 3.5\n    } else if (complete.act.data$Date_Time[i] == \"20150626 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 7 AM\"\n      complete.act.data$DayNum[i] <- 4\n    } else if (complete.act.data$Date_Time[i] == \"20150626 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 7 PM\"\n      complete.act.data$DayNum[i] <- 4.5\n    } else if (complete.act.data$Date_Time[i] == \"20150627 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 8 AM\"\n      complete.act.data$DayNum[i] <- 5\n    } else if (complete.act.data$Date_Time[i] == \"20150627 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 8 PM\"\n      complete.act.data$DayNum[i] <- 5.5\n    } else if (complete.act.data$Date_Time[i] == \"20150628 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 9 AM\"\n      complete.act.data$DayNum[i] <- 6\n    } else if (complete.act.data$Date_Time[i] == \"20150628 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 9 PM\"\n      complete.act.data$DayNum[i] <- 6.5\n    } else if (complete.act.data$Date_Time[i] == \"20150629 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 10 AM\"\n      complete.act.data$DayNum[i] <- 7\n    } else if (complete.act.data$Date_Time[i] == \"20150629 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 10 PM\"\n      complete.act.data$DayNum[i] <- 7.5\n    } else if (complete.act.data$Date_Time[i] == \"20150630 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 11 AM\"\n      complete.act.data$DayNum[i] <- 8\n    } else if (complete.act.data$Date_Time[i] == \"20150630 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 11 PM\"\n      complete.act.data$DayNum[i] <- 8.5\n    } else if (complete.act.data$Date_Time[i] == \"20150702 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 13 AM\"\n      complete.act.data$DayNum[i] <- 10\n    } else if (complete.act.data$Date_Time[i] == \"20150702 PM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 13 PM\"\n      complete.act.data$DayNum[i] <- 10.5\n    } else if(complete.act.data$Date_Time[i] == \"20150703 AM\"){\n      complete.act.data$Days_Since_Start[i] <- \"Day 14 AM\"\n      complete.act.data$DayNum[i] <- 11\n    }\n  }\n  \n#############################\n#### CQ Complex Rockfish ####\n#############################\n  \n  # Make column for Day Since Start of Experiment\n  complete.act.data.cp$Days_Since_Start <- NA\n  \n  # add a column for date time unique combinations\n  complete.act.data.cp$Date <- as.factor(complete.act.data.cp$Date)\n  complete.act.data.cp$Date_Time <- as.factor(paste(complete.act.data.cp$Date,\n                                                    complete.act.data.cp$AM_PM))\n \n  # Round temperature data to one significant figure after decimal place\n   complete.act.data.cp$RTemperature <- round(complete.act.data.cp$Temperature, 1)\n   complete.act.data.cp$DayNum <- NA\n   \n  # add in days since start of experiment column\n  for(i in 1:length(complete.act.data.cp$Days_Since_Start)){\n    if (complete.act.data.cp$Date_Time[i] == \"20150709 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 5 AM\"\n      complete.act.data.cp$DayNum[i] <- 1\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150709 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 5 PM\"\n      complete.act.data.cp$DayNum[i] <- 1.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150710 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 6 AM\"\n      complete.act.data.cp$DayNum[i] <- 2\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150710 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 6 PM\"\n      complete.act.data.cp$DayNum[i] <- 2.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150711 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 7 AM\"\n      complete.act.data.cp$DayNum[i] <- 3\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150711 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 7 PM\"\n      complete.act.data.cp$DayNum[i] <- 3.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150712 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 8 AM\"\n      complete.act.data.cp$DayNum[i] <- 4\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150712 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 8 PM\"\n      complete.act.data.cp$DayNum[i] <- 4.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150713 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 9 AM\"\n      complete.act.data.cp$DayNum[i] <- 5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150713 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 9 PM\"\n      complete.act.data.cp$DayNum[i] <- 5.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150714 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 10 AM\"\n      complete.act.data.cp$DayNum[i] <- 6\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150715 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 11 AM\"\n      complete.act.data.cp$DayNum[i] <- 7\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150715 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 11 PM\"\n      complete.act.data.cp$DayNum[i] <- 7.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150716 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 12 AM\"\n      complete.act.data.cp$DayNum[i] <- 8\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150716 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 12 PM\"\n      complete.act.data.cp$DayNum[i] <- 8.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150717 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 13 AM\"\n      complete.act.data.cp$DayNum[i] <- 9\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150717 PM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 13 PM\"\n      complete.act.data.cp$DayNum[i] <- 9.5\n    } else if (complete.act.data.cp$Date_Time[i] == \"20150718 AM\"){\n      complete.act.data.cp$Days_Since_Start[i] <- \"Day 14 AM\"\n      complete.act.data.cp$DayNum[i] <- 10\n    }\n  }\n\n```\n\n## Edit date/time to be in POSIX form\n```{r}\n## Construct AM/PM to be times\n  complete.act.data$AM_PMTime <- complete.act.data$AM_PM\n  complete.act.data$AM_PMTime <- revalue(complete.act.data$AM_PMTime, \n                                         c(\"AM\" = \"09:00:00\", \"PM\" = \"18:00:00\"))\n  complete.act.data.cp$AM_PMTime <- complete.act.data.cp$AM_PM\n  complete.act.data.cp$AM_PMTime <- revalue(complete.act.data.cp$AM_PMTime, \n                                            c(\"AM\" = \"09:00:00\", \"PM\" = \"18:00:00\"))\n## Create POSIX\n  complete.act.data$DateTimePOS <- \n    as.POSIXlt(paste(as.Date(as.character(complete.act.data$Date),\n                             format = (\"%Y%m%d\")),\n                     as.character(complete.act.data$AM_PMTime)))\n  complete.act.data.cp$DateTimePOS <-\n    as.POSIXlt(paste(as.Date(as.character(complete.act.data.cp$Date), \n                             format = (\"%Y%m%d\")),\n                     as.character(complete.act.data.cp$AM_PMTime)))\n```\n\n### Plotting\n## Panel Plot Activity Across Temperatures for Every Date\n```{r}\n################################################################\n#### Factor Days ###############################################\n#### to change to correct order for plotting the panel plot ####\n################################################################\n#### BY Complex ####\n  b.unique_Days <- c(\"Day 4 AM\", \"Day 5 PM\", \"Day 6 AM\", \"Day 6 PM\", \n                     \"Day 7 AM\", \"Day 7 PM\", \"Day 8 AM\", \"Day 8 PM\", \n                     \"Day 9 AM\", \"Day 9 PM\", \"Day 10 AM\", \"Day 10 PM\", \n                     \"Day 11 AM\", \"Day 11 PM\", \"Day 13 AM\", \"Day 13 PM\", \n                     \"Day 14 AM\")\n  complete.act.data$Days_Since_Start <- as.factor(complete.act.data$Days_Since_Start)\n  complete.act.data$Days_Since_Start <- factor(complete.act.data$Days_Since_Start, \n                                               levels = b.unique_Days)\n### copper\n   c.unique_Days <- c(\"Day 5 AM\", \"Day 5 PM\", \"Day 6 AM\", \"Day 6 PM\", \n                      \"Day 7 AM\", \"Day 7 PM\", \"Day 8 AM\", \"Day 8 PM\", \n                      \"Day 9 AM\", \"Day 9 PM\", \"Day 10 AM\", \"Day 11 AM\", \n                      \"Day 11 PM\", \"Day 12 AM\", \"Day 12 PM\", \"Day 13 AM\", \n                      \"Day 13 PM\", \"Day 14 AM\")\n   complete.act.data.cp$Days_Since_Start <- as.factor(complete.act.data.cp$Days_Since_Start)\n   complete.act.data.cp$Days_Since_Start <- factor(complete.act.data.cp$Days_Since_Start, \n                                                   levels = c.unique_Days)\n\n\n#########################\n#### BY Complex Plot ####\n#########################\n  # Save plot\n    day.plot <- ggplot(data=complete.act.data, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                       geom_point(aes(size = complete.act.data$FishAlive), alpha = 0.8) + \n                       geom_smooth(method = \"lm\", se = FALSE) \n    \n  # Create plot \n   bAll.panel <- day.plot + facet_wrap(~Days_Since_Start) +\n     labs(y = \"Mean Activity\", x = \"Temperature\") +\n     scale_color_gradient(low = \"gainsboro\", high = \"black\", name = \"Time\") + \n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"),\n           legend.position = \"none\") + \n     scale_x_continuous(breaks = pretty_breaks()) + \n     scale_radius(NULL, NULL)\n   \n##############################\n#### Copper Rockfish Plot ####\n############################## \n  # Save plot\n   day.plot.cp <- ggplot(data=complete.act.data.cp, \n                         aes(x=RTemperature, y=mean.both, \n                            group=as.factor(Days_Since_Start), \n                            color = as.integer(Date_Time))) + \n                  geom_point(aes(size = complete.act.data.cp$FishAlive), alpha = 0.8) + \n                  geom_smooth(method = \"lm\", se = FALSE) \n  # Create plot\n   cpAll.panel <- day.plot.cp + facet_wrap(~Days_Since_Start) + \n     labs(y = \"Mean Activity\", x = \"Temperature\") + \n     scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", name = \"Time\") + \n     scale_x_continuous(NULL) +\n     theme_bw() + \n     theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n           panel.grid.minor = element_blank(),\n           axis.line = element_line(colour = \"black\"), \n           legend.position = \"none\")  +\n     scale_radius(NULL, NULL)\n\n####################################\n#### Black Rockfish Single Plot ####\n####################################\n  # Create plot\n   bAll.single <- day.plot + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"black\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 PM\", \"Day 8 AM\", \"Day 10 PM\", \"Day 13 PM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(),\n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(breaks = c(1,2,3,4), name = \"# Fish Alive\", limits = c(1,4))  +\n   guides(color = guide_colourbar(order = 1),\n          size = guide_legend(order = 2))\n   \n#####################################\n#### Copper Rockfish Single Plot ####\n#####################################\n  # Create plot\n   cpAll.single <- day.plot.cp + labs(y = \"Mean Activity\", x = \"Temperature\") + \n   scale_color_gradient(low = \"gainsboro\", high = \"darkorange\", \n                        name = \"Days Since \\nStart of \\nExperiment\", \n                        breaks = c(4, 8, 12, 16), \n                        labels = c(\"Day 6 PM\", \"Day 8 AM\", \"Day 10 AM\", \"Day 13 PM\")) + \n   scale_x_continuous(breaks = pretty_breaks()) +\n   theme_bw() + \n   theme(panel.border = element_blank(), panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(), \n         axis.line = element_line(colour = \"black\")) +\n   scale_radius(NULL, NULL) \n   \n   ggarrange(bAll.panel, bAll.single, cpAll.panel, cpAll.single, labels = (c(\"A\", \"B\", \"C\", \"D\")))\n\n```\n\n## Run models for full dataset with Species as a factor\n```{r}\n##################################\n#### Data Manipulation ###########\n### Combine Species DataFrames ###\n  species <- rep(\"Black\", 259)\n  species.cp <- rep(\"Copper\", 271)\n  complete.act.data.sp <- cbind(complete.act.data, species)\n  complete.act.data.cp.sp <- cbind(complete.act.data.cp, species.cp)\n  colnames(complete.act.data.cp.sp)[15] <- \"species\"\n  full.act.data <- rbind(complete.act.data.sp,complete.act.data.cp.sp)\n  \n################################################\n#### Models ####################################\n### Full Model: species*temp*time 3-way interaction\n  species.act.m1 <- lm(full.act.data$mean.both ~\n                       full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*\n                         full.act.data$species)\n  summary(species.act.m1)\n  summary(aov(species.act.m1))\n  hist(full.act.data$mean.both)\n   \n # Test Assumptions #\n  # Autocorrelation: Because this is a repeated measures \n  acf(species.act.m1$residuals) # No autocorrelation\n  \n  # Diagnostic plots: normality and homoscedasticity \n  par(mfrow = c(2,2))\n  plot(species.act.m1)\n  qqnorm(species.act.m1$residuals)\n  qqline(species.act.m1$residuals)\n  hist(species.act.m1$residuals)\n  shapiro.test(species.act.m1$residuals)\n  # Data is not normal \n  \n  blk <- full.act.data[full.act.data$species == \"Black\", ]\n  hist(blk$mean.both)\n  cp <- full.act.data[full.act.data$species == \"Copper\", ]\n  hist(cp$mean.both)\n\n## Log 10 - Does not improve\n  species.act.m1Log <- lm(log10(full.act.data$mean.both + 10) ~\n                         full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m1Log)\n  summary(aov(species.act.m1Log))\n  \n  # Test Assumptions #\n  par(mfrow = c(2,2))\n  plot(species.act.m1Log)\n  par(mfrow = c(1,1))\n  qqnorm(species.act.m1Log$residuals)\n  qqline(species.act.m1Log$residuals)\n  hist(species.act.m1Log$residuals)\n  shapiro.test(species.act.m1Log$residuals)\n  \n## Square Root - Makes it much worse\n  species.act.m1SR <- lm(sqrt(full.act.data$mean.both) ~\n                         full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m1SR)\n  summary(aov(species.act.m1SR))\n  \n  # Test Assumptions #\n  par(mfrow = c(2,2))\n  plot(species.act.m1SR)\n  par(mfrow = c(1,1))\n  qqnorm(species.act.m1SR$residuals)\n  qqline(species.act.m1SR$residuals)\n  hist(species.act.m1SR$residuals)\n  shapiro.test(species.act.m1SR$residuals)\n  \n## Square\n  species.act.m1SQ <- lm((full.act.data$mean.both)^2 ~\n                         full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m1SQ)\n  summary(aov(species.act.m1SQ))\n  \n  # Test Assumptions #\n  par(mfrow = c(2,2))\n  plot(species.act.m1SQ)\n  par(mfrow = c(1,1))\n  qqnorm(species.act.m1SQ$residuals)\n  qqline(species.act.m1SQ$residuals)\n  hist(species.act.m1SQ$residuals)\n  shapiro.test(species.act.m1SQ$residuals)\n  \n  \n \n### Second Model Set: Time*Species & Temp*Species\n  species.act.m2 <- lm(full.act.data$mean.both~as.numeric(full.act.data$DateTimePOS)*full.act.data$species)\n  summary(species.act.m2)\n  summary(aov(species.act.m2))\n  par(mfrow = c(2,2))\n  plot(species.act.m2)\n  hist(species.act.m2$residuals)\n  shapiro.test(species.act.m2$residuals)\n  \n  species.act.m3 <- lm(full.act.data$mean.both~full.act.data$Temperature*full.act.data$species)\n  summary(species.act.m3)\n  summary(aov(species.act.m3))\n  \n### Third Model Set: Separate out Species\n ## BY Complex\n  blk.act.m1 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + \n                     as.numeric(complete.act.data$DateTimePOS) + \n                     complete.act.data$Temperature*as.numeric(complete.act.data$DateTimePOS))\n  summary(aov(blk.act.m1))\n  summary(blk.act.m1)\n  drop1(blk.act.m1)\n  \n  blk.act.m2 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + as.numeric(complete.act.data$DateTimePOS))\n  summary(aov(blk.act.m2))\n  drop1(blk.act.m2)\n  \n ## CQ Complex\n  cp.act.m1 <- lm(complete.act.data.cp$mean.both~complete.act.data.cp$Temperature + \n                     as.numeric(complete.act.data.cp$DateTimePOS) + \n                     complete.act.data.cp$Temperature*as.numeric(complete.act.data.cp$DateTimePOS))\n  summary(aov(cop.act.m1))\n  summary(cop.act.m1)\n  drop1(cop.act.m1)\n\n```\n\n\n## Monte Carlo Permutation\n```{r}\n\n####################\n#### Full Model ####\n####################\nalpha <- 0.05  # for 95% confidence interval\nbootstrap <- 999\nnew_act <- numeric(length(bootstrap))\nfvalues <- matrix(nrow = 999, ncol = 7)\ncolnames(fvalues) <- c(\"Temp\", \"Time\", \"Species\", \"Temp*Time\", \"Temp*Species\", \"Time*Species\", \"Temp*Time*Species\")\n\nfor(i in 1:bootstrap){\n  #new_y <- sample(full.act.data$mean.both, replace = TRUE)\n  new_act <- lm(sample(full.act.data$mean.both) ~ sample(full.act.data$Temperature)*sample(as.numeric(full.act.data$DateTimePOS))*sample(full.act.data$species))\n  fvalues[i,] <- summary(aov(new_act))[[1]][[\"F value\"]][1:7]\n}\n\nfvalues <- as.data.frame(fvalues)\nfval.means <- colMeans(fvalues)\nlowCI <- numeric(length(ncol(fvalues)))\nupCI <- numeric(length(ncol(fvalues)))\nfor(i in 1:ncol(fvalues)){\n  lowCI[i] <- quantile(fvalues[,i], alpha/2, type = 1)\n  upCI[i] <- quantile(fvalues[,i], 1-alpha/2, type = 1)\n}\n\nmont.carloData <- cbind(fval.means, lowCI, upCI, summary(aov(species.act.m1))[[1]][[\"F value\"]][1:7])\nmont.carloData\n\n##########################\n#### BY Complex Model ####\n##########################\nalpha <- 0.05  # for 95% confidence interval\nbootstrap <- 999\nnew_act.by <- numeric(length(bootstrap))\nfvalues.by <- matrix(nrow = 999, ncol = 7)\ncolnames(fvalues.by) <- c(\"Temp\", \"Time\", \"Species\", \"Temp*Time\", \"Temp*Species\", \"Time*Species\", \"Temp*Time*Species\")\n\nfor(i in 1:bootstrap){\n  #new_y <- sample(full.act.data$mean.both, replace = TRUE)\n  new_act.by <- lm(sample(complete.act.data$mean.both)~sample(complete.act.data$Temperature) + \n                     sample(as.numeric(complete.act.data$DateTimePOS)) + \n                     sample(complete.act.data$Temperature*as.numeric(complete.act.data$DateTimePOS)))\n  fvalues.by[i,] <- summary(aov(new_act.by))[[1]][[\"F value\"]][1:7]\n}\n\nfvalues.by <- as.data.frame(fvalues.by)\nfval.means.by <- colMeans(fvalues.by)\nlowCI.by <- numeric(length(ncol(fvalues.by)))\nupCI.by <- numeric(length(ncol(fvalues.by)))\nfor(i in 1:ncol(fvalues.by)){\n  lowCI.by[i] <- quantile(fvalues.by[,i], alpha/2, type = 1)\n  upCI.by[i] <- quantile(fvalues.by[,i], 1-alpha/2, type = 1)\n}\n\nmont.carloData.by <- cbind(fval.means.by, lowCI.by, upCI.by, summary(aov(blk.act.m1))[[1]][[\"F value\"]][1:3])\nmont.carloData.by\n\n##########################\n#### CQ Complex Model ####\n##########################\nalpha <- 0.001  # for 95% confidence interval\nbootstrap <- 999\nnew_act.cq <- numeric(length(bootstrap))\nfvalues.cq <- matrix(nrow = 999, ncol = 3)\ncolnames(fvalues.cq) <- c(\"Temp\", \"Time\",\"Temp*Time\")\n\nfor(i in 1:bootstrap){\n  #new_y <- sample(full.act.data$mean.both, replace = TRUE)\n  new_act.cq <- lm(sample(complete.act.data.cp$mean.both)~sample(complete.act.data.cp$Temperature) + \n                     sample(as.numeric(complete.act.data.cp$DateTimePOS)) + \n                     sample(complete.act.data.cp$Temperature*as.numeric(complete.act.data.cp$DateTimePOS)))\n  fvalues.cq[i,] <- summary(aov(new_act.cq))[[1]][[\"F value\"]][1:3]\n}\n\nfvalues.cq <- as.data.frame(fvalues.cq)\nfval.means.cq <- colMeans(fvalues.cq)\nlowCI.cq <- numeric(length(ncol(fvalues.cq)))\nupCI.cq <- numeric(length(ncol(fvalues.cq)))\nfor(i in 1:ncol(fvalues.cq)){\n  lowCI.cq[i] <- quantile(fvalues.cq[,i], alpha/2, type = 1)\n  upCI.cq[i] <- quantile(fvalues.cq[,i], 1-alpha/2, type = 1)\n}\n\nmont.carloData.cq <- cbind(fval.means.cq, lowCI.cq, upCI.cq, summary(aov(cp.act.m1))[[1]][[\"F value\"]][1:3])\nmont.carloData.cq\n```\n",
    "created" : 1557411582452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "39|6|81|0|\n84|6|238|0|\n241|6|389|0|\n392|6|409|0|\n",
    "hash" : "1711608845",
    "id" : "78B20806",
    "lastKnownWriteTime" : 1557488848,
    "last_content_update" : 1557488848078,
    "path" : "~/Documents/Northeastern/LotterhosLab/Research/Field_Work/2015/TPC_Experiment/Analysis/scripts/Activity_Data_Analysis.Rmd",
    "project_path" : "scripts/Activity_Data_Analysis.Rmd",
    "properties" : {
        "chunk_output_type" : "console",
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}