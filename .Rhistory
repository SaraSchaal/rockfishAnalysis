bucket.act.julia.cp <- NULL
bucket.act.sandi.cp <- NULL
bucket.act.both.cp <- NULL
bucket.act.both.noNA.cp <- NULL
bucket.act.julia.noNA.cp <- NULL
bucket.act.sandi.noNA.cp <- NULL
# initialize the counter for stepping through the output matrix
j <- 1
i <- 1
# For loop to step through data frame to get activity averages
for(i in 1:nrow(copper.act)){
# looping through majority of data to grab all those rows that are not the last row
# but are all those that equal the same bucket from the same day and getting activity averages
if(i != nrow(copper.act) && i == 1 ||
copper.act$Bucket[i] == copper.act$Bucket[i-1] && i != nrow(copper.act)){
bucket.act.julia.cp <- c(bucket.act.julia.cp, copper.act$Act_Mean_Julia[i])
bucket.act.sandi.cp <- c(bucket.act.sandi.cp, copper.act$Act_Mean_Sandi[i])
bucket.act.both.cp <- c(bucket.act.both.cp, copper.act$Act_Mean_Julia[i], copper.act$Act_Mean_Sandi[i])
# special case for last row
} else {
if(i == nrow(copper.act)){
# Remove any NAs before taking mean for a bucket at a timepoint
bucket.act.both.noNA.cp <- bucket.act.both.cp[!is.na(bucket.act.both.cp)]
bucket.act.julia.noNA.cp <- bucket.act.julia.cp[!is.na(bucket.act.julia.cp)]
bucket.act.sandi.noNA.cp <- bucket.act.sandi.cp[!is.na(bucket.act.sandi.cp)]
complete.act.data.cp$mean.julia[j] <- sum(bucket.act.julia.noNA.cp)/length(bucket.act.julia.noNA.cp)
complete.act.data.cp$mean.sandi[j] <- sum(bucket.act.sandi.noNA.cp)/length(bucket.act.sandi.noNA.cp)
complete.act.data.cp$mean.both[j] <- sum(bucket.act.both.noNA.cp)/length(bucket.act.both.noNA.cp)
complete.act.data.cp$FishAlive[j] <- length(bucket.act.sandi.noNA.cp)
j <- j + 1
} else {
# Remove any NAs before taking mean for a bucket at a timepoint
bucket.act.both.noNA.cp <- bucket.act.both.cp[!is.na(bucket.act.both.cp)]
bucket.act.julia.noNA.cp <- bucket.act.julia.cp[!is.na(bucket.act.julia.cp)]
bucket.act.sandi.noNA.cp <- bucket.act.sandi.cp[!is.na(bucket.act.sandi.cp)]
# Take mean of that bucket for that day and insert into complete.data dataframe
complete.act.data.cp$mean.julia[j] <- sum(bucket.act.julia.noNA.cp)/length(bucket.act.julia.noNA.cp)
complete.act.data.cp$mean.sandi[j] <- sum(bucket.act.sandi.noNA.cp)/length(bucket.act.sandi.noNA.cp)
complete.act.data.cp$mean.both[j] <- sum(bucket.act.both.noNA.cp)/length(bucket.act.both.noNA.cp)
complete.act.data.cp$FishAlive[j] <- length(bucket.act.sandi.noNA.cp)
bucket.act.julia.cp <- copper.act$Act_Mean_Julia[i]
bucket.act.sandi.cp <- copper.act$Act_Mean_Sandi[i]
bucket.act.both.cp <- c(copper.act$Act_Mean_Julia[i], copper.act$Act_Mean_Sandi[i])
# counter to step through inputting data into the complete.data dataframe
j <- j + 1
} # close else
} # close if else
} # close for loop
### Black Rockfish ###
# make column for days since start of experiment for panel headers
complete.act.data$Days_Since_Start <- NA
# add a column that is Date with time of day
complete.act.data$Date <- as.factor(complete.act.data$Date)
complete.act.data$Date_Time <- as.factor(paste(complete.act.data$Date, complete.act.data$AM_PM))
# Round temperature data to one significant figure after decimal place
complete.act.data$RTemperature <- round(complete.act.data$Temperature, 1)
complete.act.data$DayNum <- NA
# add in days since start of experiment column
for(i in 1:length(complete.act.data$Days_Since_Start)){
if (complete.act.data$Date_Time[i] == "20150623 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 4 AM"
complete.act.data$DayNum[i] <- 1
} else if (complete.act.data$Date_Time[i] == "20150624 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 5 PM"
complete.act.data$DayNum[i] <- 2
} else if (complete.act.data$Date_Time[i] == "20150625 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 6 AM"
complete.act.data$DayNum[i] <- 3
} else if (complete.act.data$Date_Time[i] == "20150625 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 6 PM"
complete.act.data$DayNum[i] <- 3.5
} else if (complete.act.data$Date_Time[i] == "20150626 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 7 AM"
complete.act.data$DayNum[i] <- 4
} else if (complete.act.data$Date_Time[i] == "20150626 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 7 PM"
complete.act.data$DayNum[i] <- 4.5
} else if (complete.act.data$Date_Time[i] == "20150627 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 8 AM"
complete.act.data$DayNum[i] <- 5
} else if (complete.act.data$Date_Time[i] == "20150627 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 8 PM"
complete.act.data$DayNum[i] <- 5.5
} else if (complete.act.data$Date_Time[i] == "20150628 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 9 AM"
complete.act.data$DayNum[i] <- 6
} else if (complete.act.data$Date_Time[i] == "20150628 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 9 PM"
complete.act.data$DayNum[i] <- 6.5
} else if (complete.act.data$Date_Time[i] == "20150629 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 10 AM"
complete.act.data$DayNum[i] <- 7
} else if (complete.act.data$Date_Time[i] == "20150629 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 10 PM"
complete.act.data$DayNum[i] <- 7.5
} else if (complete.act.data$Date_Time[i] == "20150630 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 11 AM"
complete.act.data$DayNum[i] <- 8
} else if (complete.act.data$Date_Time[i] == "20150630 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 11 PM"
complete.act.data$DayNum[i] <- 8.5
} else if (complete.act.data$Date_Time[i] == "20150702 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 13 AM"
complete.act.data$DayNum[i] <- 10
} else if (complete.act.data$Date_Time[i] == "20150702 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 13 PM"
complete.act.data$DayNum[i] <- 10.5
} else if(complete.act.data$Date_Time[i] == "20150703 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 14 AM"
complete.act.data$DayNum[i] <- 11
}
}
### Copper Rockfish ###
# Make column for Day Since Start of Experiment
complete.act.data.cp$Days_Since_Start <- NA
# add a column for date time unique combinations
complete.act.data.cp$Date <- as.factor(complete.act.data.cp$Date)
complete.act.data.cp$Date_Time <- as.factor(paste(complete.act.data.cp$Date, complete.act.data.cp$AM_PM))
#complete.act.data.cp[157,9] <- "Day 10 AM" #I am not sure why this single value is going in wrong
#complete.act.data.cp[157,10] <- "20150714 AM"
# Round temperature data to one significant figure after decimal place
complete.act.data.cp$RTemperature <- round(complete.act.data.cp$Temperature, 1)
complete.act.data.cp$DayNum <- NA
# add in days since start of experiment column
for(i in 1:length(complete.act.data.cp$Days_Since_Start)){
if (complete.act.data.cp$Date_Time[i] == "20150709 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 5 AM"
complete.act.data.cp$DayNum[i] <- 1
} else if (complete.act.data.cp$Date_Time[i] == "20150709 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 5 PM"
complete.act.data.cp$DayNum[i] <- 1.5
} else if (complete.act.data.cp$Date_Time[i] == "20150710 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 6 AM"
complete.act.data.cp$DayNum[i] <- 2
} else if (complete.act.data.cp$Date_Time[i] == "20150710 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 6 PM"
complete.act.data.cp$DayNum[i] <- 2.5
} else if (complete.act.data.cp$Date_Time[i] == "20150711 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 7 AM"
complete.act.data.cp$DayNum[i] <- 3
} else if (complete.act.data.cp$Date_Time[i] == "20150711 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 7 PM"
complete.act.data.cp$DayNum[i] <- 3.5
} else if (complete.act.data.cp$Date_Time[i] == "20150712 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 8 AM"
complete.act.data.cp$DayNum[i] <- 4
} else if (complete.act.data.cp$Date_Time[i] == "20150712 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 8 PM"
complete.act.data.cp$DayNum[i] <- 4.5
} else if (complete.act.data.cp$Date_Time[i] == "20150713 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 9 AM"
complete.act.data.cp$DayNum[i] <- 5
} else if (complete.act.data.cp$Date_Time[i] == "20150713 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 9 PM"
complete.act.data.cp$DayNum[i] <- 5.5
} else if (complete.act.data.cp$Date_Time[i] == "20150714 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 10 AM"
complete.act.data.cp$DayNum[i] <- 6
} else if (complete.act.data.cp$Date_Time[i] == "20150715 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 11 AM"
complete.act.data.cp$DayNum[i] <- 7
} else if (complete.act.data.cp$Date_Time[i] == "20150715 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 11 PM"
complete.act.data.cp$DayNum[i] <- 7.5
} else if (complete.act.data.cp$Date_Time[i] == "20150716 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 12 AM"
complete.act.data.cp$DayNum[i] <- 8
} else if (complete.act.data.cp$Date_Time[i] == "20150716 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 12 PM"
complete.act.data.cp$DayNum[i] <- 8.5
} else if (complete.act.data.cp$Date_Time[i] == "20150717 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 13 AM"
complete.act.data.cp$DayNum[i] <- 9
} else if (complete.act.data.cp$Date_Time[i] == "20150717 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 13 PM"
complete.act.data.cp$DayNum[i] <- 9.5
} else if (complete.act.data.cp$Date_Time[i] == "20150718 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 14 AM"
complete.act.data.cp$DayNum[i] <- 10
}
}
################################################################
#### Factor Days ###############################################
#### to change to correct order for plotting the panel plot ####
################################################################
### black
b.unique_Days <- c("Day 4 AM", "Day 5 PM", "Day 6 AM", "Day 6 PM", "Day 7 AM", "Day 7 PM",
"Day 8 AM", "Day 8 PM", "Day 9 AM", "Day 9 PM", "Day 10 AM", "Day 10 PM",
"Day 11 AM", "Day 11 PM", "Day 13 AM", "Day 13 PM", "Day 14 AM")
complete.act.data$Days_Since_Start <- as.factor(complete.act.data$Days_Since_Start)
complete.act.data$Days_Since_Start <- factor(complete.act.data$Days_Since_Start,
levels = b.unique_Days)
### copper
c.unique_Days <- c("Day 5 AM", "Day 5 PM", "Day 6 AM", "Day 6 PM", "Day 7 AM", "Day 7 PM",
"Day 8 AM", "Day 8 PM", "Day 9 AM", "Day 9 PM", "Day 10 AM", "Day 11 AM",
"Day 11 PM", "Day 12 AM", "Day 12 PM", "Day 13 AM", "Day 13 PM", "Day 14 AM")
complete.act.data.cp$Days_Since_Start <- as.factor(complete.act.data.cp$Days_Since_Start)
complete.act.data.cp$Days_Since_Start <- factor(complete.act.data.cp$Days_Since_Start,
levels = c.unique_Days)
#############################
#### Black Rockfish Plot ####
#############################
# Save plot
day.plot <- ggplot(data=complete.act.data,
aes(x=RTemperature, y=mean.both,
group=as.factor(Days_Since_Start),
color = as.integer(Date_Time))) +
geom_point(aes(size = complete.act.data$FishAlive), alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
# Create plot
bAll.panel <- day.plot + facet_wrap(~Days_Since_Start) +
labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "black", name = "Time") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none") +
scale_x_continuous(breaks = pretty_breaks()) +
#scale_size(range = c(1,3))
scale_radius(NULL, NULL)
##############################
#### Copper Rockfish Plot ####
##############################
# Save plot
day.plot.cp <- ggplot(data=complete.act.data.cp,
aes(x=RTemperature, y=mean.both,
group=as.factor(Days_Since_Start),
color = as.integer(Date_Time))) +
geom_point(aes(size = complete.act.data.cp$FishAlive), alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
# Create plot
cpAll.panel <- day.plot.cp + facet_wrap(~Days_Since_Start) +
labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "darkorange", name = "Time") +
scale_x_continuous(NULL) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none")  +
scale_radius(NULL, NULL)
####################################
#### Black Rockfish Single Plot ####
####################################
# Create plot
bAll.single <- day.plot + labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "black",
name = "Days Since \nStart of \nExperiment",
breaks = c(4, 8, 12, 16),
labels = c("Day 6 PM", "Day 8 AM", "Day 10 PM", "Day 13 PM")) +
scale_x_continuous(breaks = pretty_breaks()) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_radius(breaks = c(1,2,3,4), name = "# Fish Alive", limits = c(1,4))  +
guides(color = guide_colourbar(order = 1),
size = guide_legend(order = 2))
#####################################
#### Copper Rockfish Single Plot ####
#####################################
# Create plot
cpAll.single <- day.plot.cp + labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "darkorange",
name = "Days Since \nStart of \nExperiment",
breaks = c(4, 8, 12, 16),
labels = c("Day 6 PM", "Day 8 AM", "Day 10 AM", "Day 13 PM")) +
scale_x_continuous(breaks = pretty_breaks()) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_radius(NULL, NULL)
ggarrange(bAll.panel, bAll.single, cpAll.panel, cpAll.single, labels = (c("A", "B", "C", "D")))
library(plyr)
#Inspect data elements
str(complete.act.data)
# Construct AM/PM to be times
complete.act.data$AM_PMTime <- complete.act.data$AM_PM
complete.act.data$AM_PMTime <- revalue(complete.act.data$AM_PMTime,
c("AM" = "09:00:00", "PM" = "18:00:00"))
complete.act.data.cp$AM_PMTime <- complete.act.data.cp$AM_PM
complete.act.data.cp$AM_PMTime <- revalue(complete.act.data.cp$AM_PMTime,
c("AM" = "09:00:00", "PM" = "18:00:00"))
# Create POSIX
# black
complete.act.data$DateTimePOS <- as.POSIXlt(paste(as.Date(as.character(complete.act.data$Date),
format = ("%Y%m%d")),
as.character(complete.act.data$AM_PMTime)))
# copper
complete.act.data.cp$DateTimePOS <- as.POSIXlt(paste(as.Date(as.character(complete.act.data.cp$Date),
format = ("%Y%m%d")),
as.character(complete.act.data.cp$AM_PMTime)))
##################################
#### Data Manipulation ###########
### Combine Species DataFrames ###
species <- rep("Black", 259)
species.cp <- rep("Copper", 271)
complete.act.data.sp <- cbind(complete.act.data, species)
complete.act.data.cp.sp <- cbind(complete.act.data.cp, species.cp)
colnames(complete.act.data.cp.sp)[15] <- "species"
full.act.data <- rbind(complete.act.data.sp,complete.act.data.cp.sp)
###################################################
### Full Model: species*temp*time 3-way interaction
species.act.m1 <- lm(full.act.data$mean.both ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1)
summary(aov(species.act.m1))
hist(full.act.data$mean.both)
drop1(species.act.m1)
species.act.m2 <- lm(full.act.data$mean.both ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS) +
full.act.data$Temperature*full.act.data$species +
as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
anova(species.act.m1,  species.act.m2, test = "LRT")
# Model 1 - full model with three way interaction is the best model
## Test Assumptions
# Test for Autocorrelation: Because this is a repeated measures
acf(species.act.m1$residuals) # No autocorrelation
# plot data to evaluate assumptions
par(mfrow = c(2,2))
plot(species.act.m1)
qqnorm(species.act.m1$residuals)
qqline(species.act.m1$residuals)
hist(species.act.m1$residuals)
# test for normality using shapiro-wilk test
shapiro.test(species.act.m1$residuals) # significant value - not normal
anova(quasiModel1, quasiModel2,  test = "LRT")
setwd("~/Documents/Northeastern/Teaching/Biostats_Labs2020/Lab7")
co2 <- read.table("lab_co2.txt", header = TRUE)
temp <- read.csv("lab_temp.csv")
pop <- read.csv("lab_population.csv")
#1
str(pop)
range(pop$year)
str(temp)
range(temp$year)
str(co2)
range(co2$year)
#2
temp.long <- reshape(temp, varying = list(2:13), idvar = "Year", direction = "long")
temp.long
colnames(temp.long) <- c("year", "month", "temp")
#3
temp.agg <- aggregate(temp~year, FUN = mean, data = temp.long)
co2.agg <- aggregate(ppm~year, FUN = mean, data = co2)
pop.agg <- aggregate(popsize~year, FUN = mean, data = pop)
#4
data.merge <- merge(co2.agg, temp.agg, by = "year")
data.merge <- merge(data.merge, pop.agg, by = "year")
data.merge
getwd()
co2 <- read.table("lab_co2.txt", header = TRUE)
getwd()
#1
dat1<-data.frame(Year=2000:2010, temp = c(rnorm(10),0))
dat2<-data.frame(Year=1999:2006, co2 = c(rnorm(7),0))
merge.data <- merge(dat1,dat2)
merge(dat2,dat1, all.x = TRUE)
cor(merge.data)
pairs(merge.data)
#2
summary(lm(y~x+z, data = cor))
head(merge.data)
head(data.merged)
#4
data.merge <- merge(co2.agg, temp.agg, by = "year")
data.merge <- merge(data.merge, pop.agg, by = "year")
data.merge
(7.6428 + 6.3813 + 8.7873 + 9.7684)/4
(7.6438+6.3818)/2
(6.3818 + 9.768)/2
7.0128 + 8.0749
6.3818 + 8.14495
14.52675  -15.0877
(1/(1  - 0.91))
(1/(1  - 0.91))
(1/(1  - 0.04))
(-0.1/(1.73)^2)
2/(2.49)^2
52.5/55
#####################
#### BY Combined ####
#####################
## Logistic regression with interaction of temp and species where BY combined
quasiModel1 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
summary(quasiModel1)
# dropping interaction term
quasiModel2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature + Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
anova(quasiModel1, quasiModel2,  test = "LRT")
# Can drop the interaction term due to nonsignificant LRT
Anova(quasiModel2, type = 2)
summary(quasiModel2)
###################################
#### Species in a Single Model ####
###################################
### All Four Species ##############
## Logistic regression for the interaction between temperature and species on survival
log.mod.all.prop <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species,
family = quasibinomial(link = 'logit'), data = mort.data)
summary(log.mod.all.prop)
#####################
#### BY Combined ####
#####################
## Logistic regression with interaction of temp and species where BY combined
quasiModel1 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
summary(quasiModel1)
Anova(quasiModel1, type = 2)
# dropping interaction term
quasiModel2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature + Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
anova(quasiModel1, quasiModel2,  test = "LRT")
Anova(quasiModel1, type = 2)
# dropping interaction term
quasiModel2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature + Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
anova(quasiModel1, quasiModel2,  test = "LRT")
#####################
#### BY Combined ####
#####################
## Logistic regression with interaction of temp and species where BY combined
quasiModel1 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
summary(quasiModel1)
Anova(quasiModel1, type = 2)
# dropping interaction term
quasiModel2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature + Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
anova(quasiModel1, quasiModel2,  test = "LRT")
################################
#### Complex Level Analysis ####
################################
## Logistic regression with interaction of temp and species where complexes are combined
log.mod.all.complex <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species3,
family = binomial(link = 'logit'), data = mort.data)
summary(log.mod.all.complex)
Anova(log.mod.all.complex, type = 2)
################################
#### Complex Level Analysis ####
################################
## Logistic regression with interaction of temp and species where complexes are combined
log.mod.all.complex <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species3,
family = binomial(link = 'logit'), data = mort.data)
summary(log.mod.all.complex)
Anova(log.mod.all.complex, type = 2)
## Logistic regression with interaction of temp and species where complexes are combined
quasi.mod.all.complex <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species3,
family = quasibinomial(link = 'logit'), data = mort.data)
summary(quasi.mod.all.complex)
Anova(quasi.mod.all.complex, type = 2)
# Significant interaction but check likelihood ratio test to ensure best model
quasi.mod.all.complex2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature+Species3,
family = quasibinomial(link = 'logit'), data = mort.data)
anova(quasi.mod.all.complex, quasi.mod.all.complex2, test = "LRT")
###################################
#### Species in a Single Model ####
###################################
### All Four Species ##############
## Logistic regression for the interaction between temperature and species on survival
log.mod.all.prop <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species,
family = quasibinomial(link = 'logit'), data = mort.data)
summary(log.mod.all.prop)
#####################
#### BY Combined ####
#####################
## Logistic regression with interaction of temp and species where BY combined
quasiModel1 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
summary(quasiModel1)
# dropping interaction term
quasiModel2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature + Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
anova(quasiModel1, quasiModel2,  test = "LRT")
# Can drop the interaction term due to nonsignificant LRT
Anova(quasiModel2, type = 2)
summary(quasiModel2)
# Can drop the interaction term due to nonsignificant LRT
Anova(quasiModel2, type = 2)
#####################
#### BY Combined ####
#####################
## Logistic regression with interaction of temp and species where BY combined
quasiModel1 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature*Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
summary(quasiModel1)
Anova(quasiModel1, type = 2)
# dropping interaction term
quasiModel2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature + Species2,
family = quasibinomial(link = "logit"),
data = mort.data)
anova(quasiModel1, quasiModel2,  test = "LRT")
# Can drop the interaction term due to nonsignificant LRT
Anova(quasiModel2, type = 2)
summary(quasiModel2)
# Significant interaction but check likelihood ratio test to ensure best model
quasi.mod.all.complex2 <- glm(cbind(Days_Survived, DaysDead)~Treatment_Temperature+Species3,
family = quasibinomial(link = 'logit'), data = mort.data)
summary(quasi.mod.all.complex2)
