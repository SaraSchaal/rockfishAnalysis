} else if (complete.act.data$Date_Time[i] == "20150629 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 10 AM"
complete.act.data$DayNum[i] <- 7
} else if (complete.act.data$Date_Time[i] == "20150629 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 10 PM"
complete.act.data$DayNum[i] <- 7.5
} else if (complete.act.data$Date_Time[i] == "20150630 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 11 AM"
complete.act.data$DayNum[i] <- 8
} else if (complete.act.data$Date_Time[i] == "20150630 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 11 PM"
complete.act.data$DayNum[i] <- 8.5
} else if (complete.act.data$Date_Time[i] == "20150702 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 13 AM"
complete.act.data$DayNum[i] <- 10
} else if (complete.act.data$Date_Time[i] == "20150702 PM"){
complete.act.data$Days_Since_Start[i] <- "Day 13 PM"
complete.act.data$DayNum[i] <- 10.5
} else if(complete.act.data$Date_Time[i] == "20150703 AM"){
complete.act.data$Days_Since_Start[i] <- "Day 14 AM"
complete.act.data$DayNum[i] <- 11
}
}
### Copper Rockfish ###
# Make column for Day Since Start of Experiment
complete.act.data.cp$Days_Since_Start <- NA
# add a column for date time unique combinations
complete.act.data.cp$Date <- as.factor(complete.act.data.cp$Date)
complete.act.data.cp$Date_Time <- as.factor(paste(complete.act.data.cp$Date, complete.act.data.cp$AM_PM))
#complete.act.data.cp[157,9] <- "Day 10 AM" #I am not sure why this single value is going in wrong
#complete.act.data.cp[157,10] <- "20150714 AM"
# Round temperature data to one significant figure after decimal place
complete.act.data.cp$RTemperature <- round(complete.act.data.cp$Temperature, 1)
complete.act.data.cp$DayNum <- NA
# add in days since start of experiment column
for(i in 1:length(complete.act.data.cp$Days_Since_Start)){
if (complete.act.data.cp$Date_Time[i] == "20150709 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 5 AM"
complete.act.data.cp$DayNum[i] <- 1
} else if (complete.act.data.cp$Date_Time[i] == "20150709 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 5 PM"
complete.act.data.cp$DayNum[i] <- 1.5
} else if (complete.act.data.cp$Date_Time[i] == "20150710 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 6 AM"
complete.act.data.cp$DayNum[i] <- 2
} else if (complete.act.data.cp$Date_Time[i] == "20150710 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 6 PM"
complete.act.data.cp$DayNum[i] <- 2.5
} else if (complete.act.data.cp$Date_Time[i] == "20150711 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 7 AM"
complete.act.data.cp$DayNum[i] <- 3
} else if (complete.act.data.cp$Date_Time[i] == "20150711 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 7 PM"
complete.act.data.cp$DayNum[i] <- 3.5
} else if (complete.act.data.cp$Date_Time[i] == "20150712 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 8 AM"
complete.act.data.cp$DayNum[i] <- 4
} else if (complete.act.data.cp$Date_Time[i] == "20150712 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 8 PM"
complete.act.data.cp$DayNum[i] <- 4.5
} else if (complete.act.data.cp$Date_Time[i] == "20150713 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 9 AM"
complete.act.data.cp$DayNum[i] <- 5
} else if (complete.act.data.cp$Date_Time[i] == "20150713 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 9 PM"
complete.act.data.cp$DayNum[i] <- 5.5
} else if (complete.act.data.cp$Date_Time[i] == "20150714 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 10 AM"
complete.act.data.cp$DayNum[i] <- 6
} else if (complete.act.data.cp$Date_Time[i] == "20150715 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 11 AM"
complete.act.data.cp$DayNum[i] <- 7
} else if (complete.act.data.cp$Date_Time[i] == "20150715 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 11 PM"
complete.act.data.cp$DayNum[i] <- 7.5
} else if (complete.act.data.cp$Date_Time[i] == "20150716 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 12 AM"
complete.act.data.cp$DayNum[i] <- 8
} else if (complete.act.data.cp$Date_Time[i] == "20150716 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 12 PM"
complete.act.data.cp$DayNum[i] <- 8.5
} else if (complete.act.data.cp$Date_Time[i] == "20150717 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 13 AM"
complete.act.data.cp$DayNum[i] <- 9
} else if (complete.act.data.cp$Date_Time[i] == "20150717 PM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 13 PM"
complete.act.data.cp$DayNum[i] <- 9.5
} else if (complete.act.data.cp$Date_Time[i] == "20150718 AM"){
complete.act.data.cp$Days_Since_Start[i] <- "Day 14 AM"
complete.act.data.cp$DayNum[i] <- 10
}
}
################################################################
#### Factor Days ###############################################
#### to change to correct order for plotting the panel plot ####
################################################################
### black
b.unique_Days <- c("Day 4 AM", "Day 5 PM", "Day 6 AM", "Day 6 PM", "Day 7 AM", "Day 7 PM",
"Day 8 AM", "Day 8 PM", "Day 9 AM", "Day 9 PM", "Day 10 AM", "Day 10 PM",
"Day 11 AM", "Day 11 PM", "Day 13 AM", "Day 13 PM", "Day 14 AM")
complete.act.data$Days_Since_Start <- as.factor(complete.act.data$Days_Since_Start)
complete.act.data$Days_Since_Start <- factor(complete.act.data$Days_Since_Start,
levels = b.unique_Days)
### copper
c.unique_Days <- c("Day 5 AM", "Day 5 PM", "Day 6 AM", "Day 6 PM", "Day 7 AM", "Day 7 PM",
"Day 8 AM", "Day 8 PM", "Day 9 AM", "Day 9 PM", "Day 10 AM", "Day 11 AM",
"Day 11 PM", "Day 12 AM", "Day 12 PM", "Day 13 AM", "Day 13 PM", "Day 14 AM")
complete.act.data.cp$Days_Since_Start <- as.factor(complete.act.data.cp$Days_Since_Start)
complete.act.data.cp$Days_Since_Start <- factor(complete.act.data.cp$Days_Since_Start,
levels = c.unique_Days)
#############################
#### Black Rockfish Plot ####
#############################
# Save plot
day.plot <- ggplot(data=complete.act.data,
aes(x=RTemperature, y=mean.both,
group=as.factor(Days_Since_Start),
color = as.integer(Date_Time))) +
geom_point(aes(size = complete.act.data$FishAlive), alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
# Create plot
bAll.panel <- day.plot + facet_wrap(~Days_Since_Start) +
labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "black", name = "Time") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none") +
scale_x_continuous(breaks = pretty_breaks()) +
#scale_size(range = c(1,3))
scale_radius(NULL, NULL)
##############################
#### Copper Rockfish Plot ####
##############################
# Save plot
day.plot.cp <- ggplot(data=complete.act.data.cp,
aes(x=RTemperature, y=mean.both,
group=as.factor(Days_Since_Start),
color = as.integer(Date_Time))) +
geom_point(aes(size = complete.act.data.cp$FishAlive), alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE)
# Create plot
cpAll.panel <- day.plot.cp + facet_wrap(~Days_Since_Start) +
labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "darkorange", name = "Time") +
scale_x_continuous(NULL) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "none")  +
scale_radius(NULL, NULL)
####################################
#### Black Rockfish Single Plot ####
####################################
# Create plot
bAll.single <- day.plot + labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "black",
name = "Days Since \nStart of \nExperiment",
breaks = c(4, 8, 12, 16),
labels = c("Day 6 PM", "Day 8 AM", "Day 10 PM", "Day 13 PM")) +
scale_x_continuous(breaks = pretty_breaks()) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_radius(breaks = c(1,2,3,4), name = "# Fish Alive", limits = c(1,4))  +
guides(color = guide_colourbar(order = 1),
size = guide_legend(order = 2))
#####################################
#### Copper Rockfish Single Plot ####
#####################################
# Create plot
cpAll.single <- day.plot.cp + labs(y = "Mean Activity", x = "Temperature") +
scale_color_gradient(low = "gainsboro", high = "darkorange",
name = "Days Since \nStart of \nExperiment",
breaks = c(4, 8, 12, 16),
labels = c("Day 6 PM", "Day 8 AM", "Day 10 AM", "Day 13 PM")) +
scale_x_continuous(breaks = pretty_breaks()) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_radius(NULL, NULL)
ggarrange(bAll.panel, bAll.single, cpAll.panel, cpAll.single, labels = (c("A", "B", "C", "D")))
if(!("ggpubr" %in% installed.packages())){
install.packages("ggpubr")
}
library(ggpubr)
ggarrange(bAll.panel, bAll.single, cpAll.panel, cpAll.single, labels = (c("A", "B", "C", "D")))
## black
# vector of unique days & empty data frames for writing slopes to
b.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data$Days_Since_Start)))
# Create for loop to capture slopes of regression between activity and temp for each date/time
for(i in 1:length(unique(complete.act.data$Days_Since_Start))){
b.slopes[i,1] <- lm(mean.both~RTemperature, data = complete.act.data,
subset = Days_Since_Start == b.unique_Days[i])$coefficients[[2]]
b.slopes[i,2] <-  summary(lm(mean.both~RTemperature, data = complete.act.data,
subset = Days_Since_Start == b.unique_Days[i]))$coefficients[2,2]
b.slopes[i,3] <- b.slopes[i,1] - 1.96*b.slopes[i,2]
b.slopes[i,4] <- b.slopes[i,1] + 1.96*b.slopes[i,2]
}
output <- summary(lm(mean.both~RTemperature, data = complete.act.data, subset = Days_Since_Start == b.unique_Days[2]))
summary(lm(mean.both~RTemperature, data = complete.act.data, subset = Days_Since_Start == b.unique_Days[3]))$coefficients[2,2]
## copper
# vector of unique days & empty data frames for writing slopes to
c.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data.cp$Days_Since_Start)))
# Create for loop to capture slopes of regression between activity and temp for each date/time
for (i in 1:length(unique(complete.act.data.cp$Days_Since_Start))){
c.slopes[i] <- lm(mean.both~RTemperature, data = complete.act.data.cp,
subset = Days_Since_Start == c.unique_Days[i])$coefficients[[2]]
c.slopes[i,2] <-  summary(lm(mean.both~RTemperature, data = complete.act.data.cp,
subset = Days_Since_Start == c.unique_Days[i]))$coefficients[2,2]
c.slopes[i,3] <- c.slopes[i,1] - 1.96*c.slopes[i,2]
c.slopes[i,4] <- c.slopes[i,1] + 1.96*c.slopes[i,2]
}
## Create plot of days since start vs slope of the activity~temp regression
# number unique days for scatterplot .5 increments indicate PM measurements integers are AM
b.unique_Days_num <- c(4, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 13, 13.5, 14)
c.unique_Days_num <- c(5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 11.5, 12, 12.5, 13, 13.5, 14)
# plot
par(mfrow = c(1,2))
plot(b.slopes[ ,1]~b.unique_Days_num, type = "l",
ylim = c(min(c.slopes)-0.05, max(c.slopes)+0.05),
lwd = 2, bty = "l", ylab= "Activity vs Temperature Regression Slope",
xlab = "Day of Experiment")
points(b.slopes[ ,3]~b.unique_Days_num, type = "l", col = "grey")
points(b.slopes[ ,4]~b.unique_Days_num, type = "l", col = "grey")
abline(0,0, lty = 2)
legend("topleft", legend = c("BY Complex", "CQ complex"), col = c("black", "orange"), lwd = 2)
mtext(text = "A", side = 3, adj = 0.01, padj = 0.01)
plot(c.slopes[ ,1]~c.unique_Days_num, type = "l", lwd = 2, col = "orange",
bty = "l", ylim = c(min(c.slopes)-0.05, max(c.slopes)+0.05),
ylab = NA, xlab = "Day of Experiment")
points(c.slopes[ ,3]~c.unique_Days_num, type = "l", col = "grey")
points(c.slopes[ ,4]~c.unique_Days_num, type = "l", col = "grey")
abline(0,0, lty = 2)
mtext(text = "B", side = 3, adj = 0.01, padj = 0.01)
## black
b.unique_Temp <- sort(unique(complete.act.data$RTemperature))
# vector of unique days & empty data frames for writing slopes to
ttb.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data$RTemperature)))
prac <- subset(complete.act.data, subset = complete.act.data$RTemperature == 22.6)
prac$DateNum <- c(1:17)
plot(mean.both~DateNum, data = prac)
abline(lm(mean.both~DateNum, data = prac))
summary(lm(mean.both~DateNum, data = prac))
# Create for loop to capture slopes of regression between activity and temp for each date/time
for (i in 1:length(unique(complete.act.data$RTemperature))){
ttb.slopes[i,1] <- lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data,
subset = RTemperature == b.unique_Temp[i])$coefficients[[2]]
ttb.slopes[i,2] <-  summary(lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data,
subset = RTemperature == b.unique_Temp[i]))$coefficients[2,2]
ttb.slopes[i,3] <- ttb.slopes[i,1] - 1.96*ttb.slopes[i,2]
ttb.slopes[i,4] <- ttb.slopes[i,1] + 1.96*ttb.slopes[i,2]
}
## copper
c.unique_Temp <- sort(unique(complete.act.data.cp$RTemperature))
# vector of unique days & empty data frames for writing slopes to
ttc.slopes <- matrix(ncol = 4, nrow = length(unique(complete.act.data.cp$RTemperature)))
# Create for loop to capture slopes of regression between activity and temp for each date/time
for (i in 1:length(unique(complete.act.data.cp$RTemperature))){
ttc.slopes[i] <- lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data.cp,
subset = RTemperature == c.unique_Temp[i])$coefficients[[2]]
ttc.slopes[i,2] <-  summary(lm(mean.both~as.numeric(DateTimePOS), data = complete.act.data.cp,
subset = RTemperature == c.unique_Temp[i]))$coefficients[2,2]
ttc.slopes[i,3] <- ttc.slopes[i,1] - 1.96*ttc.slopes[i,2]
ttc.slopes[i,4] <- ttc.slopes[i,1] + 1.96*ttc.slopes[i,2]
}
## Create plot of days since start vs slope of the activity~temp regression
# number unique days for scatterplot .5 increments indicate PM measurements integers are AM
b.unique_Days_num <- c(4, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 13, 13.5, 14)
c.unique_Days_num <- c(5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 11.5, 12, 12.5, 13, 13.5, 14)
# plot
par(mfrow = c(1,2))
plot(ttb.slopes[ ,1]~b.unique_Temp, type = "l",
lwd = 2, bty = "l", ylab= "Activity vs Day Regression Slope",
xlab = "Temperature", ylim = c(-0.3, 0.2))
points(ttb.slopes[ ,3]~ttb.unique_Days_num, type = "l", col = "grey")
points(ttb.slopes[ ,4]~ttb.unique_Days_num, type = "l", col = "grey")
abline(0,0, lty = 2)
plot(ttc.slopes[ ,1]~c.unique_Temp, type = "l", lwd = 2, col = "orange",
bty = "l", ylim = c(min(ttc.slopes)-0.05, max(ttc.slopes)+0.05),
ylab = NA, xlab = "Day of Experiment")
points(ttc.slopes[ ,3]~c.unique_Days_num, type = "l", col = "grey")
points(ttc.slopes[ ,4]~c.unique_Days_num, type = "l", col = "grey")
abline(0,0, lty = 2)
legend("topright", legend = c("BY Complex", "CQ complex"), col = c("black", "orange"), lwd = 2)
b.unique_Days <- c("Day 4 AM", "Day 5 PM", "Day 6 AM", "Day 6 PM", "Day 7 AM", "Day 7 PM",
"Day 8 AM", "Day 8 PM", "Day 9 AM", "Day 9 PM", "Day 10 AM", "Day 10 PM",
"Day 11 AM", "Day 11 PM", "Day 13 AM", "Day 13 PM", "Day 14 AM")
complete.act.data$Days_Since_Start <- as.factor(complete.act.data$Days_Since_Start)
complete.act.data$Days_Since_Start <- factor(complete.act.data$Days_Since_Start,
levels = b.unique_Days)
### copper
c.unique_Days <- c("Day 5 AM", "Day 5 PM", "Day 6 AM", "Day 6 PM", "Day 7 AM", "Day 7 PM",
"Day 8 AM", "Day 8 PM", "Day 9 AM", "Day 9 PM", "Day 10 AM", "Day 11 AM",
"Day 11 PM", "Day 12 AM", "Day 12 PM", "Day 13 AM", "Day 13 PM", "Day 14 AM")
complete.act.data.cp$Days_Since_Start <- as.factor(complete.act.data.cp$Days_Since_Start)
complete.act.data.cp$Days_Since_Start <- factor(complete.act.data.cp$Days_Since_Start,
levels = c.unique_Days)
##################################
#### Data Manipulation ###########
### Combine Species DataFrames ###
species <- rep("Black", 259)
species.cp <- rep("Copper", 271)
complete.act.data.sp <- cbind(complete.act.data, species)
complete.act.data.cp.sp <- cbind(complete.act.data.cp, species.cp)
colnames(complete.act.data.cp.sp)[15] <- "species"
full.act.data <- rbind(complete.act.data.sp,complete.act.data.cp.sp)
################################################
#### Models ####################################
### Full Model: species*temp*time 3-way interaction
species.act.m1 <- lm(full.act.data$mean.both ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1)
summary(aov(species.act.m1))
hist(full.act.data$mean.both)
## Test Assumptions
# Autocorrelation: Because this is a repeated measures
acf(species.act.m1$residuals) # No autocorrelation
par(mfrow = c(2,2))
plot(species.act.m1)
qqnorm(species.act.m1$residuals)
qqline(species.act.m1$residuals)
hist(species.act.m1$residuals)
shapiro.test(species.act.m1$residuals)
# Log 10 - Does not improve
species.act.m1Log <- lm(log10(full.act.data$mean.both + 10) ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1Log)
summary(aov(species.act.m1Log))
# Assumptions
par(mfrow = c(2,2))
plot(species.act.m1Log)
par(mfrow = c(1,1))
qqnorm(species.act.m1Log$residuals)
qqline(species.act.m1Log$residuals)
hist(species.act.m1Log$residuals)
shapiro.test(species.act.m1Log$residuals)
## Square Root - Makes it way worse
species.act.m1SR <- lm(sqrt(full.act.data$mean.both) ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1SR)
summary(aov(species.act.m1SR))
# Assumptions
par(mfrow = c(2,2))
plot(species.act.m1SR)
par(mfrow = c(1,1))
qqnorm(species.act.m1SR$residuals)
qqline(species.act.m1SR$residuals)
hist(species.act.m1SR$residuals)
shapiro.test(species.act.m1SR$residuals)
## Square
species.act.m1SQ <- lm((full.act.data$mean.both)^2 ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1SQ)
summary(aov(species.act.m1SQ))
# Assumptions
par(mfrow = c(2,2))
plot(species.act.m1SQ)
par(mfrow = c(1,1))
qqnorm(species.act.m1SQ$residuals)
qqline(species.act.m1SQ$residuals)
hist(species.act.m1SQ$residuals)
shapiro.test(species.act.m1SQ$residuals)
## sm ANCOVA or fANCOVA: try and see what it shows to help account for the non-linearity in our residuals
## MonteCarlo to see fit of the
sm.ancova(as.numeric(full.act.data$DateTimePOS),full.act.data$mean.both,full.act.data$species)
### Second Model Set: Time*Species & Temp*Species
species.act.m2 <- lm(full.act.data$mean.both~as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m2)
summary(aov(species.act.m2))
species.act.m3 <- lm(full.act.data$mean.both~full.act.data$Temperature*full.act.data$species)
summary(species.act.m3)
summary(aov(species.act.m3))
### Third Model Set: Separate out Species
## Black Rockfish
blk.act.m1 <- lm(complete.act.data$mean.both~complete.act.data$Temperature +
as.numeric(complete.act.data$DateTimePOS) +
complete.act.data$Temperature*as.numeric(complete.act.data$DateTimePOS))
summary(aov(blk.act.m1))
summary(blk.act.m1)
drop1(blk.act.m1)
blk.act.m2 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + as.numeric(complete.act.data$DateTimePOS))
summary(aov(blk.act.m2))
drop1(blk.act.m2)
## Copper Rockfish
cop.act.m1 <- lm(complete.act.data.cp$mean.both~complete.act.data.cp$Temperature +
as.numeric(complete.act.data.cp$DateTimePOS) +
complete.act.data.cp$Temperature*as.numeric(complete.act.data.cp$DateTimePOS))
summary(aov(cop.act.m1))
summary(cop.act.m1)
drop1(cop.act.m1)
library(plyr)
#Inspect data elements
str(complete.act.data)
# Construct AM/PM to be times
complete.act.data$AM_PMTime <- complete.act.data$AM_PM
complete.act.data$AM_PMTime <- revalue(complete.act.data$AM_PMTime,
c("AM" = "09:00:00", "PM" = "18:00:00"))
complete.act.data.cp$AM_PMTime <- complete.act.data.cp$AM_PM
complete.act.data.cp$AM_PMTime <- revalue(complete.act.data.cp$AM_PMTime,
c("AM" = "09:00:00", "PM" = "18:00:00"))
# Create POSIX
# black
complete.act.data$DateTimePOS <- as.POSIXlt(paste(as.Date(as.character(complete.act.data$Date),
format = ("%Y%m%d")),
as.character(complete.act.data$AM_PMTime)))
# copper
complete.act.data.cp$DateTimePOS <- as.POSIXlt(paste(as.Date(as.character(complete.act.data.cp$Date),
format = ("%Y%m%d")),
as.character(complete.act.data.cp$AM_PMTime)))
##################################
#### Data Manipulation ###########
### Combine Species DataFrames ###
species <- rep("Black", 259)
species.cp <- rep("Copper", 271)
complete.act.data.sp <- cbind(complete.act.data, species)
complete.act.data.cp.sp <- cbind(complete.act.data.cp, species.cp)
colnames(complete.act.data.cp.sp)[15] <- "species"
full.act.data <- rbind(complete.act.data.sp,complete.act.data.cp.sp)
################################################
#### Models ####################################
### Full Model: species*temp*time 3-way interaction
species.act.m1 <- lm(full.act.data$mean.both ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1)
summary(aov(species.act.m1))
hist(full.act.data$mean.both)
## Test Assumptions
# Autocorrelation: Because this is a repeated measures
acf(species.act.m1$residuals) # No autocorrelation
par(mfrow = c(2,2))
plot(species.act.m1)
qqnorm(species.act.m1$residuals)
qqline(species.act.m1$residuals)
hist(species.act.m1$residuals)
shapiro.test(species.act.m1$residuals)
# Log 10 - Does not improve
species.act.m1Log <- lm(log10(full.act.data$mean.both + 10) ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1Log)
summary(aov(species.act.m1Log))
# Assumptions
par(mfrow = c(2,2))
plot(species.act.m1Log)
par(mfrow = c(1,1))
qqnorm(species.act.m1Log$residuals)
qqline(species.act.m1Log$residuals)
hist(species.act.m1Log$residuals)
shapiro.test(species.act.m1Log$residuals)
## Square Root - Makes it way worse
species.act.m1SR <- lm(sqrt(full.act.data$mean.both) ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1SR)
summary(aov(species.act.m1SR))
# Assumptions
par(mfrow = c(2,2))
plot(species.act.m1SR)
par(mfrow = c(1,1))
qqnorm(species.act.m1SR$residuals)
qqline(species.act.m1SR$residuals)
hist(species.act.m1SR$residuals)
shapiro.test(species.act.m1SR$residuals)
## Square
species.act.m1SQ <- lm((full.act.data$mean.both)^2 ~
full.act.data$Temperature*as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m1SQ)
summary(aov(species.act.m1SQ))
# Assumptions
par(mfrow = c(2,2))
plot(species.act.m1SQ)
par(mfrow = c(1,1))
qqnorm(species.act.m1SQ$residuals)
qqline(species.act.m1SQ$residuals)
hist(species.act.m1SQ$residuals)
shapiro.test(species.act.m1SQ$residuals)
## sm ANCOVA or fANCOVA: try and see what it shows to help account for the non-linearity in our residuals
## MonteCarlo to see fit of the
sm.ancova(as.numeric(full.act.data$DateTimePOS),full.act.data$mean.both,full.act.data$species)
### Second Model Set: Time*Species & Temp*Species
species.act.m2 <- lm(full.act.data$mean.both~as.numeric(full.act.data$DateTimePOS)*full.act.data$species)
summary(species.act.m2)
summary(aov(species.act.m2))
species.act.m3 <- lm(full.act.data$mean.both~full.act.data$Temperature*full.act.data$species)
summary(species.act.m3)
summary(aov(species.act.m3))
### Third Model Set: Separate out Species
## Black Rockfish
blk.act.m1 <- lm(complete.act.data$mean.both~complete.act.data$Temperature +
as.numeric(complete.act.data$DateTimePOS) +
complete.act.data$Temperature*as.numeric(complete.act.data$DateTimePOS))
summary(aov(blk.act.m1))
summary(blk.act.m1)
drop1(blk.act.m1)
blk.act.m2 <- lm(complete.act.data$mean.both~complete.act.data$Temperature + as.numeric(complete.act.data$DateTimePOS))
summary(aov(blk.act.m2))
drop1(blk.act.m2)
## Copper Rockfish
cop.act.m1 <- lm(complete.act.data.cp$mean.both~complete.act.data.cp$Temperature +
as.numeric(complete.act.data.cp$DateTimePOS) +
complete.act.data.cp$Temperature*as.numeric(complete.act.data.cp$DateTimePOS))
summary(aov(cop.act.m1))
summary(cop.act.m1)
drop1(cop.act.m1)
sm.ancova(as.numeric(full.act.data$DateTimePOS),full.act.data$mean.both,full.act.data$species)
summary( sm.ancova(as.numeric(full.act.data$DateTimePOS),full.act.data$mean.both,full.act.data$species))
nonpar <- sm.ancova(as.numeric(full.act.data$DateTimePOS),full.act.data$mean.both,full.act.data$species)
summary(nonpar)
nonpar2 <- sm.ancova(full.act.data$mean.both~as.numeric(full.act.data$DateTimePOS)+full.act.data$species)
